// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _feature_Loop_memcpy_featureh_featureHi_HH_
#define _feature_Loop_memcpy_featureh_featureHi_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct feature_Loop_memcpy_featureh_featureHi : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_featureh_AWVALID;
    sc_in< sc_logic > m_axi_featureh_AWREADY;
    sc_out< sc_lv<32> > m_axi_featureh_AWADDR;
    sc_out< sc_lv<1> > m_axi_featureh_AWID;
    sc_out< sc_lv<32> > m_axi_featureh_AWLEN;
    sc_out< sc_lv<3> > m_axi_featureh_AWSIZE;
    sc_out< sc_lv<2> > m_axi_featureh_AWBURST;
    sc_out< sc_lv<2> > m_axi_featureh_AWLOCK;
    sc_out< sc_lv<4> > m_axi_featureh_AWCACHE;
    sc_out< sc_lv<3> > m_axi_featureh_AWPROT;
    sc_out< sc_lv<4> > m_axi_featureh_AWQOS;
    sc_out< sc_lv<4> > m_axi_featureh_AWREGION;
    sc_out< sc_lv<1> > m_axi_featureh_AWUSER;
    sc_out< sc_logic > m_axi_featureh_WVALID;
    sc_in< sc_logic > m_axi_featureh_WREADY;
    sc_out< sc_lv<16> > m_axi_featureh_WDATA;
    sc_out< sc_lv<2> > m_axi_featureh_WSTRB;
    sc_out< sc_logic > m_axi_featureh_WLAST;
    sc_out< sc_lv<1> > m_axi_featureh_WID;
    sc_out< sc_lv<1> > m_axi_featureh_WUSER;
    sc_out< sc_logic > m_axi_featureh_ARVALID;
    sc_in< sc_logic > m_axi_featureh_ARREADY;
    sc_out< sc_lv<32> > m_axi_featureh_ARADDR;
    sc_out< sc_lv<1> > m_axi_featureh_ARID;
    sc_out< sc_lv<32> > m_axi_featureh_ARLEN;
    sc_out< sc_lv<3> > m_axi_featureh_ARSIZE;
    sc_out< sc_lv<2> > m_axi_featureh_ARBURST;
    sc_out< sc_lv<2> > m_axi_featureh_ARLOCK;
    sc_out< sc_lv<4> > m_axi_featureh_ARCACHE;
    sc_out< sc_lv<3> > m_axi_featureh_ARPROT;
    sc_out< sc_lv<4> > m_axi_featureh_ARQOS;
    sc_out< sc_lv<4> > m_axi_featureh_ARREGION;
    sc_out< sc_lv<1> > m_axi_featureh_ARUSER;
    sc_in< sc_logic > m_axi_featureh_RVALID;
    sc_out< sc_logic > m_axi_featureh_RREADY;
    sc_in< sc_lv<16> > m_axi_featureh_RDATA;
    sc_in< sc_logic > m_axi_featureh_RLAST;
    sc_in< sc_lv<1> > m_axi_featureh_RID;
    sc_in< sc_lv<1> > m_axi_featureh_RUSER;
    sc_in< sc_lv<2> > m_axi_featureh_RRESP;
    sc_in< sc_logic > m_axi_featureh_BVALID;
    sc_out< sc_logic > m_axi_featureh_BREADY;
    sc_in< sc_lv<2> > m_axi_featureh_BRESP;
    sc_in< sc_lv<1> > m_axi_featureh_BID;
    sc_in< sc_lv<1> > m_axi_featureh_BUSER;
    sc_in< sc_lv<32> > featureh1_dout;
    sc_in< sc_logic > featureh1_empty_n;
    sc_out< sc_logic > featureh1_read;
    sc_out< sc_lv<9> > featureHist_address0;
    sc_out< sc_logic > featureHist_ce0;
    sc_in< sc_lv<16> > featureHist_q0;


    // Module declarations
    feature_Loop_memcpy_featureh_featureHi(sc_module_name name);
    SC_HAS_PROCESS(feature_Loop_memcpy_featureh_featureHi);

    ~feature_Loop_memcpy_featureh_featureHi();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_27;
    sc_signal< sc_lv<10> > indvar1_i_reg_95;
    sc_signal< sc_lv<32> > featureh_addr_reg_143;
    sc_signal< bool > ap_sig_bdd_108;
    sc_signal< sc_lv<1> > exitcond4_i_fu_126_p2;
    sc_signal< sc_lv<1> > exitcond4_i_reg_148;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_2;
    sc_signal< bool > ap_sig_bdd_118;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_featureh_WREADY;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<10> > indvar_next1_i_fu_132_p2;
    sc_signal< sc_lv<16> > featureHist_load_reg_162;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_151;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_featureh_AWREADY;
    sc_signal< sc_lv<64> > tmp_4_i_fu_138_p1;
    sc_signal< sc_lv<64> > tmp_10_fu_116_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_featureh_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_featureh_WREADY;
    sc_signal< sc_logic > ap_sig_cseq_ST_st10_fsm_7;
    sc_signal< bool > ap_sig_bdd_188;
    sc_signal< sc_lv<31> > tmp_fu_106_p4;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_176;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_st1_fsm_0;
    static const sc_lv<8> ap_ST_st2_fsm_1;
    static const sc_lv<8> ap_ST_pp0_stg0_fsm_2;
    static const sc_lv<8> ap_ST_st6_fsm_3;
    static const sc_lv<8> ap_ST_st7_fsm_4;
    static const sc_lv<8> ap_ST_st8_fsm_5;
    static const sc_lv<8> ap_ST_st9_fsm_6;
    static const sc_lv<8> ap_ST_st10_fsm_7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_200;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_108();
    void thread_ap_sig_bdd_118();
    void thread_ap_sig_bdd_151();
    void thread_ap_sig_bdd_176();
    void thread_ap_sig_bdd_188();
    void thread_ap_sig_bdd_27();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_2();
    void thread_ap_sig_cseq_ST_st10_fsm_7();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_ioackin_m_axi_featureh_AWREADY();
    void thread_ap_sig_ioackin_m_axi_featureh_WREADY();
    void thread_exitcond4_i_fu_126_p2();
    void thread_featureHist_address0();
    void thread_featureHist_ce0();
    void thread_featureh1_read();
    void thread_indvar_next1_i_fu_132_p2();
    void thread_m_axi_featureh_ARADDR();
    void thread_m_axi_featureh_ARBURST();
    void thread_m_axi_featureh_ARCACHE();
    void thread_m_axi_featureh_ARID();
    void thread_m_axi_featureh_ARLEN();
    void thread_m_axi_featureh_ARLOCK();
    void thread_m_axi_featureh_ARPROT();
    void thread_m_axi_featureh_ARQOS();
    void thread_m_axi_featureh_ARREGION();
    void thread_m_axi_featureh_ARSIZE();
    void thread_m_axi_featureh_ARUSER();
    void thread_m_axi_featureh_ARVALID();
    void thread_m_axi_featureh_AWADDR();
    void thread_m_axi_featureh_AWBURST();
    void thread_m_axi_featureh_AWCACHE();
    void thread_m_axi_featureh_AWID();
    void thread_m_axi_featureh_AWLEN();
    void thread_m_axi_featureh_AWLOCK();
    void thread_m_axi_featureh_AWPROT();
    void thread_m_axi_featureh_AWQOS();
    void thread_m_axi_featureh_AWREGION();
    void thread_m_axi_featureh_AWSIZE();
    void thread_m_axi_featureh_AWUSER();
    void thread_m_axi_featureh_AWVALID();
    void thread_m_axi_featureh_BREADY();
    void thread_m_axi_featureh_RREADY();
    void thread_m_axi_featureh_WDATA();
    void thread_m_axi_featureh_WID();
    void thread_m_axi_featureh_WLAST();
    void thread_m_axi_featureh_WSTRB();
    void thread_m_axi_featureh_WUSER();
    void thread_m_axi_featureh_WVALID();
    void thread_tmp_10_fu_116_p1();
    void thread_tmp_4_i_fu_138_p1();
    void thread_tmp_fu_106_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
