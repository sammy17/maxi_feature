// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _feature_Loop_memcpy_boundingBoxes_boun_HH_
#define _feature_Loop_memcpy_boundingBoxes_boun_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct feature_Loop_memcpy_boundingBoxes_boun : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_bounding_AWVALID;
    sc_in< sc_logic > m_axi_bounding_AWREADY;
    sc_out< sc_lv<32> > m_axi_bounding_AWADDR;
    sc_out< sc_lv<1> > m_axi_bounding_AWID;
    sc_out< sc_lv<32> > m_axi_bounding_AWLEN;
    sc_out< sc_lv<3> > m_axi_bounding_AWSIZE;
    sc_out< sc_lv<2> > m_axi_bounding_AWBURST;
    sc_out< sc_lv<2> > m_axi_bounding_AWLOCK;
    sc_out< sc_lv<4> > m_axi_bounding_AWCACHE;
    sc_out< sc_lv<3> > m_axi_bounding_AWPROT;
    sc_out< sc_lv<4> > m_axi_bounding_AWQOS;
    sc_out< sc_lv<4> > m_axi_bounding_AWREGION;
    sc_out< sc_lv<1> > m_axi_bounding_AWUSER;
    sc_out< sc_logic > m_axi_bounding_WVALID;
    sc_in< sc_logic > m_axi_bounding_WREADY;
    sc_out< sc_lv<16> > m_axi_bounding_WDATA;
    sc_out< sc_lv<2> > m_axi_bounding_WSTRB;
    sc_out< sc_logic > m_axi_bounding_WLAST;
    sc_out< sc_lv<1> > m_axi_bounding_WID;
    sc_out< sc_lv<1> > m_axi_bounding_WUSER;
    sc_out< sc_logic > m_axi_bounding_ARVALID;
    sc_in< sc_logic > m_axi_bounding_ARREADY;
    sc_out< sc_lv<32> > m_axi_bounding_ARADDR;
    sc_out< sc_lv<1> > m_axi_bounding_ARID;
    sc_out< sc_lv<32> > m_axi_bounding_ARLEN;
    sc_out< sc_lv<3> > m_axi_bounding_ARSIZE;
    sc_out< sc_lv<2> > m_axi_bounding_ARBURST;
    sc_out< sc_lv<2> > m_axi_bounding_ARLOCK;
    sc_out< sc_lv<4> > m_axi_bounding_ARCACHE;
    sc_out< sc_lv<3> > m_axi_bounding_ARPROT;
    sc_out< sc_lv<4> > m_axi_bounding_ARQOS;
    sc_out< sc_lv<4> > m_axi_bounding_ARREGION;
    sc_out< sc_lv<1> > m_axi_bounding_ARUSER;
    sc_in< sc_logic > m_axi_bounding_RVALID;
    sc_out< sc_logic > m_axi_bounding_RREADY;
    sc_in< sc_lv<16> > m_axi_bounding_RDATA;
    sc_in< sc_logic > m_axi_bounding_RLAST;
    sc_in< sc_lv<1> > m_axi_bounding_RID;
    sc_in< sc_lv<1> > m_axi_bounding_RUSER;
    sc_in< sc_lv<2> > m_axi_bounding_RRESP;
    sc_in< sc_logic > m_axi_bounding_BVALID;
    sc_out< sc_logic > m_axi_bounding_BREADY;
    sc_in< sc_lv<2> > m_axi_bounding_BRESP;
    sc_in< sc_lv<1> > m_axi_bounding_BID;
    sc_in< sc_lv<1> > m_axi_bounding_BUSER;
    sc_in< sc_lv<32> > bounding1;
    sc_in< sc_lv<32> > frame_in;
    sc_in< sc_lv<32> > featureh;
    sc_out< sc_lv<32> > frame_in_out_din;
    sc_in< sc_logic > frame_in_out_full_n;
    sc_out< sc_logic > frame_in_out_write;
    sc_out< sc_lv<32> > featureh_out_din;
    sc_in< sc_logic > featureh_out_full_n;
    sc_out< sc_logic > featureh_out_write;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;
    sc_out< sc_lv<16> > ap_return_2;
    sc_out< sc_lv<16> > ap_return_3;


    // Module declarations
    feature_Loop_memcpy_boundingBoxes_boun(sc_module_name name);
    SC_HAS_PROCESS(feature_Loop_memcpy_boundingBoxes_boun);

    ~feature_Loop_memcpy_boundingBoxes_boun();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_28;
    sc_signal< sc_lv<16> > boundingBoxes_3_out_i_i_reg_124;
    sc_signal< sc_lv<16> > boundingBoxes_2_out_i_i_reg_136;
    sc_signal< sc_lv<16> > boundingBoxes_3_2_reg_148;
    sc_signal< sc_lv<16> > boundingBoxes_3_5_reg_160;
    sc_signal< sc_lv<3> > indvar_i_i_i_reg_172;
    sc_signal< bool > ap_sig_bdd_122;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_bounding_ARREADY;
    sc_signal< sc_lv<1> > exitcond_i_i_i_fu_204_p2;
    sc_signal< sc_lv<1> > exitcond_i_i_i_reg_323;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_7;
    sc_signal< bool > ap_sig_bdd_135;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_142;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_i_i_i_reg_323_pp0_it1;
    sc_signal< sc_lv<3> > indvar_next_i_i_i_fu_210_p2;
    sc_signal< sc_lv<2> > tmp_12_fu_216_p1;
    sc_signal< sc_lv<2> > tmp_12_reg_332;
    sc_signal< sc_lv<2> > ap_reg_ppstg_tmp_12_reg_332_pp0_it1;
    sc_signal< sc_lv<16> > boundingBoxes_0_reg_339;
    sc_signal< sc_lv<16> > boundingBoxes_3_fu_248_p3;
    sc_signal< sc_lv<16> > boundingBoxes_3_1_fu_263_p3;
    sc_signal< sc_lv<16> > boundingBoxes_3_4_fu_278_p3;
    sc_signal< sc_lv<16> > boundingBoxes_3_6_fu_286_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_bdd_181;
    sc_signal< bool > ap_sig_bdd_186;
    sc_signal< sc_lv<64> > tmp_11_fu_193_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_bounding_ARREADY;
    sc_signal< sc_lv<31> > tmp_fu_183_p4;
    sc_signal< sc_lv<1> > sel_tmp4_i_i_fu_230_p2;
    sc_signal< sc_lv<1> > sel_tmp2_i_i_fu_225_p2;
    sc_signal< sc_lv<1> > sel_tmp_i_i_fu_220_p2;
    sc_signal< sc_lv<1> > or_cond_i_i_fu_235_p2;
    sc_signal< sc_lv<16> > newSel4_i_i_fu_241_p3;
    sc_signal< sc_lv<16> > newSel_i_i_fu_256_p3;
    sc_signal< sc_lv<16> > boundingBoxes_3_3_fu_271_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st11_fsm_8;
    sc_signal< bool > ap_sig_bdd_280;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_371;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_st1_fsm_0;
    static const sc_lv<9> ap_ST_st2_fsm_1;
    static const sc_lv<9> ap_ST_st3_fsm_2;
    static const sc_lv<9> ap_ST_st4_fsm_3;
    static const sc_lv<9> ap_ST_st5_fsm_4;
    static const sc_lv<9> ap_ST_st6_fsm_5;
    static const sc_lv<9> ap_ST_st7_fsm_6;
    static const sc_lv<9> ap_ST_pp0_stg0_fsm_7;
    static const sc_lv<9> ap_ST_st11_fsm_8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_sig_bdd_122();
    void thread_ap_sig_bdd_135();
    void thread_ap_sig_bdd_142();
    void thread_ap_sig_bdd_181();
    void thread_ap_sig_bdd_186();
    void thread_ap_sig_bdd_28();
    void thread_ap_sig_bdd_280();
    void thread_ap_sig_bdd_371();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_7();
    void thread_ap_sig_cseq_ST_st11_fsm_8();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_ioackin_m_axi_bounding_ARREADY();
    void thread_boundingBoxes_3_1_fu_263_p3();
    void thread_boundingBoxes_3_3_fu_271_p3();
    void thread_boundingBoxes_3_4_fu_278_p3();
    void thread_boundingBoxes_3_6_fu_286_p3();
    void thread_boundingBoxes_3_fu_248_p3();
    void thread_exitcond_i_i_i_fu_204_p2();
    void thread_featureh_out_din();
    void thread_featureh_out_write();
    void thread_frame_in_out_din();
    void thread_frame_in_out_write();
    void thread_indvar_next_i_i_i_fu_210_p2();
    void thread_m_axi_bounding_ARADDR();
    void thread_m_axi_bounding_ARBURST();
    void thread_m_axi_bounding_ARCACHE();
    void thread_m_axi_bounding_ARID();
    void thread_m_axi_bounding_ARLEN();
    void thread_m_axi_bounding_ARLOCK();
    void thread_m_axi_bounding_ARPROT();
    void thread_m_axi_bounding_ARQOS();
    void thread_m_axi_bounding_ARREGION();
    void thread_m_axi_bounding_ARSIZE();
    void thread_m_axi_bounding_ARUSER();
    void thread_m_axi_bounding_ARVALID();
    void thread_m_axi_bounding_AWADDR();
    void thread_m_axi_bounding_AWBURST();
    void thread_m_axi_bounding_AWCACHE();
    void thread_m_axi_bounding_AWID();
    void thread_m_axi_bounding_AWLEN();
    void thread_m_axi_bounding_AWLOCK();
    void thread_m_axi_bounding_AWPROT();
    void thread_m_axi_bounding_AWQOS();
    void thread_m_axi_bounding_AWREGION();
    void thread_m_axi_bounding_AWSIZE();
    void thread_m_axi_bounding_AWUSER();
    void thread_m_axi_bounding_AWVALID();
    void thread_m_axi_bounding_BREADY();
    void thread_m_axi_bounding_RREADY();
    void thread_m_axi_bounding_WDATA();
    void thread_m_axi_bounding_WID();
    void thread_m_axi_bounding_WLAST();
    void thread_m_axi_bounding_WSTRB();
    void thread_m_axi_bounding_WUSER();
    void thread_m_axi_bounding_WVALID();
    void thread_newSel4_i_i_fu_241_p3();
    void thread_newSel_i_i_fu_256_p3();
    void thread_or_cond_i_i_fu_235_p2();
    void thread_sel_tmp2_i_i_fu_225_p2();
    void thread_sel_tmp4_i_i_fu_230_p2();
    void thread_sel_tmp_i_i_fu_220_p2();
    void thread_tmp_11_fu_193_p1();
    void thread_tmp_12_fu_216_p1();
    void thread_tmp_fu_183_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
