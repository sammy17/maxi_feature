-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feature is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OFFSET_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OFFSET_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_OFFSET_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_OFFSET_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OFFSET_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_AWREADY : IN STD_LOGIC;
    m_axi_gmem_offset_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_offset_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_WVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_WREADY : IN STD_LOGIC;
    m_axi_gmem_offset_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH-1 downto 0);
    m_axi_gmem_offset_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_offset_WLAST : OUT STD_LOGIC;
    m_axi_gmem_offset_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_ARREADY : IN STD_LOGIC;
    m_axi_gmem_offset_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_offset_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_RVALID : IN STD_LOGIC;
    m_axi_gmem_offset_RREADY : OUT STD_LOGIC;
    m_axi_gmem_offset_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH-1 downto 0);
    m_axi_gmem_offset_RLAST : IN STD_LOGIC;
    m_axi_gmem_offset_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_BVALID : IN STD_LOGIC;
    m_axi_gmem_offset_BREADY : OUT STD_LOGIC;
    m_axi_gmem_offset_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of feature is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "feature,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=1,HLS_SYN_TPT=348394,HLS_SYN_MEM=3,HLS_SYN_DSP=1,HLS_SYN_FF=1966,HLS_SYN_LUT=3148}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal feature_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal frame_in : STD_LOGIC_VECTOR (31 downto 0);
    signal bounding : STD_LOGIC_VECTOR (31 downto 0);
    signal featureh : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_CRTL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_gmem_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal gmem_offset_AWVALID : STD_LOGIC;
    signal gmem_offset_AWREADY : STD_LOGIC;
    signal gmem_offset_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_WVALID : STD_LOGIC;
    signal gmem_offset_WREADY : STD_LOGIC;
    signal gmem_offset_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_offset_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_WLAST : STD_LOGIC;
    signal gmem_offset_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_ARVALID : STD_LOGIC;
    signal gmem_offset_ARREADY : STD_LOGIC;
    signal gmem_offset_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RVALID : STD_LOGIC;
    signal gmem_offset_RREADY : STD_LOGIC;
    signal gmem_offset_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_offset_RLAST : STD_LOGIC;
    signal gmem_offset_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_BVALID : STD_LOGIC;
    signal gmem_offset_BREADY : STD_LOGIC;
    signal gmem_offset_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_gmem_offset_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal featureHist_i_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal featureHist_i_ce0 : STD_LOGIC;
    signal featureHist_i_we0 : STD_LOGIC;
    signal featureHist_i_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal featureHist_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal featureHist_i_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal featureHist_i_ce1 : STD_LOGIC;
    signal featureHist_i_we1 : STD_LOGIC;
    signal featureHist_i_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal featureHist_i_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal featureHist_t_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal featureHist_t_ce0 : STD_LOGIC;
    signal featureHist_t_we0 : STD_LOGIC;
    signal featureHist_t_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal featureHist_t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal featureHist_t_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal featureHist_t_ce1 : STD_LOGIC;
    signal featureHist_t_we1 : STD_LOGIC;
    signal featureHist_t_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal featureHist_t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal featureHist_U_ap_dummy_ce : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_idle : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWVALID : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWREADY : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WVALID : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WREADY : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WLAST : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARVALID : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARREADY : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RVALID : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RREADY : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RLAST : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BVALID : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BREADY : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_bounding1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_featureh : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_full_n : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_write : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_full_n : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_write : STD_LOGIC;
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_0_loc_channel : STD_LOGIC;
    signal boundingBoxes_0_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_boundingBoxes_0_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_boundingBoxes_0_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_2_loc_channel : STD_LOGIC;
    signal boundingBoxes_2_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_boundingBoxes_2_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_boundingBoxes_2_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_3_loc_channel : STD_LOGIC;
    signal boundingBoxes_3_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_boundingBoxes_3_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_boundingBoxes_3_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_1_loc_channel : STD_LOGIC;
    signal boundingBoxes_1_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_boundingBoxes_1_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_boundingBoxes_1_loc_channel_full_n : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_ap_start : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_ap_done : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_ap_continue : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_ap_idle : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_ap_ready : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_ce0 : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_we0 : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_ce1 : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_we1 : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWVALID : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWREADY : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WVALID : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WREADY : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WLAST : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARVALID : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARREADY : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RVALID : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RREADY : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RLAST : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BVALID : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BREADY : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_frame_in1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_frame_in1_empty_n : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_frame_in1_read : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_p_read : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_p_read1 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_p_read2 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memset_featureHist_proc1_U0_p_read3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_chn_write_feature_Loop_memset_featureHist_proc1_U0_featureHist : STD_LOGIC;
    signal feature_Loop_memset_featureHist_proc1_U0_featureHist_pipo_status : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_ap_start : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_ap_done : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_ap_continue : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_ap_idle : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_ap_ready : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWVALID : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWREADY : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WVALID : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WREADY : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WLAST : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARVALID : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARREADY : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RVALID : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RREADY : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RLAST : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BVALID : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BREADY : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_featureh1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_featureh1_empty_n : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_featureh1_read : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_featureHist_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_Loop_memcpy_featureh_featureHi_U0_featureHist_ce0 : STD_LOGIC;
    signal feature_Loop_memcpy_featureh_featureHi_U0_featureHist_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal featureHist_i_full_n : STD_LOGIC;
    signal featureHist_i_write : STD_LOGIC;
    signal featureHist_t_empty_n : STD_LOGIC;
    signal featureHist_t_read : STD_LOGIC;
    signal frame_in_channel_U_ap_dummy_ce : STD_LOGIC;
    signal frame_in_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_in_channel_full_n : STD_LOGIC;
    signal frame_in_channel_write : STD_LOGIC;
    signal frame_in_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_in_channel_empty_n : STD_LOGIC;
    signal frame_in_channel_read : STD_LOGIC;
    signal featureh_channel_U_ap_dummy_ce : STD_LOGIC;
    signal featureh_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal featureh_channel_full_n : STD_LOGIC;
    signal featureh_channel_write : STD_LOGIC;
    signal featureh_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal featureh_channel_empty_n : STD_LOGIC;
    signal featureh_channel_read : STD_LOGIC;
    signal boundingBoxes_3_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal boundingBoxes_3_loc_channel_din : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_3_loc_channel_write : STD_LOGIC;
    signal boundingBoxes_3_loc_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_3_loc_channel_empty_n : STD_LOGIC;
    signal boundingBoxes_3_loc_channel_read : STD_LOGIC;
    signal boundingBoxes_2_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal boundingBoxes_2_loc_channel_din : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_2_loc_channel_write : STD_LOGIC;
    signal boundingBoxes_2_loc_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_2_loc_channel_empty_n : STD_LOGIC;
    signal boundingBoxes_2_loc_channel_read : STD_LOGIC;
    signal boundingBoxes_1_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal boundingBoxes_1_loc_channel_din : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_1_loc_channel_write : STD_LOGIC;
    signal boundingBoxes_1_loc_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_1_loc_channel_empty_n : STD_LOGIC;
    signal boundingBoxes_1_loc_channel_read : STD_LOGIC;
    signal boundingBoxes_0_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal boundingBoxes_0_loc_channel_din : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_0_loc_channel_write : STD_LOGIC;
    signal boundingBoxes_0_loc_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_0_loc_channel_empty_n : STD_LOGIC;
    signal boundingBoxes_0_loc_channel_read : STD_LOGIC;
    signal ap_reg_procdone_feature_Loop_memcpy_boundingBoxes_boun_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_feature_Loop_memset_featureHist_proc1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_feature_Loop_memcpy_featureh_featureHi_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_feature_Loop_memset_featureHist_proc1_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start : STD_LOGIC;

    component feature_Loop_memcpy_boundingBoxes_boun IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bounding_AWVALID : OUT STD_LOGIC;
        m_axi_bounding_AWREADY : IN STD_LOGIC;
        m_axi_bounding_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bounding_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bounding_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bounding_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bounding_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bounding_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bounding_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bounding_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bounding_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bounding_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_WVALID : OUT STD_LOGIC;
        m_axi_bounding_WREADY : IN STD_LOGIC;
        m_axi_bounding_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_bounding_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bounding_WLAST : OUT STD_LOGIC;
        m_axi_bounding_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_ARVALID : OUT STD_LOGIC;
        m_axi_bounding_ARREADY : IN STD_LOGIC;
        m_axi_bounding_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bounding_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bounding_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bounding_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bounding_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bounding_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bounding_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bounding_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bounding_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bounding_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_RVALID : IN STD_LOGIC;
        m_axi_bounding_RREADY : OUT STD_LOGIC;
        m_axi_bounding_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_bounding_RLAST : IN STD_LOGIC;
        m_axi_bounding_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bounding_BVALID : IN STD_LOGIC;
        m_axi_bounding_BREADY : OUT STD_LOGIC;
        m_axi_bounding_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bounding_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bounding_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bounding1 : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_in : IN STD_LOGIC_VECTOR (31 downto 0);
        featureh : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_in_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_in_out_full_n : IN STD_LOGIC;
        frame_in_out_write : OUT STD_LOGIC;
        featureh_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        featureh_out_full_n : IN STD_LOGIC;
        featureh_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component feature_Loop_memset_featureHist_proc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        featureHist_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        featureHist_ce0 : OUT STD_LOGIC;
        featureHist_we0 : OUT STD_LOGIC;
        featureHist_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        featureHist_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        featureHist_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        featureHist_ce1 : OUT STD_LOGIC;
        featureHist_we1 : OUT STD_LOGIC;
        featureHist_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        featureHist_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_frame_in_AWVALID : OUT STD_LOGIC;
        m_axi_frame_in_AWREADY : IN STD_LOGIC;
        m_axi_frame_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frame_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frame_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_WVALID : OUT STD_LOGIC;
        m_axi_frame_in_WREADY : IN STD_LOGIC;
        m_axi_frame_in_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_frame_in_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_WLAST : OUT STD_LOGIC;
        m_axi_frame_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_ARVALID : OUT STD_LOGIC;
        m_axi_frame_in_ARREADY : IN STD_LOGIC;
        m_axi_frame_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frame_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frame_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_RVALID : IN STD_LOGIC;
        m_axi_frame_in_RREADY : OUT STD_LOGIC;
        m_axi_frame_in_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_frame_in_RLAST : IN STD_LOGIC;
        m_axi_frame_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_in_BVALID : IN STD_LOGIC;
        m_axi_frame_in_BREADY : OUT STD_LOGIC;
        m_axi_frame_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        frame_in1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_in1_empty_n : IN STD_LOGIC;
        frame_in1_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component feature_Loop_memcpy_featureh_featureHi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_featureh_AWVALID : OUT STD_LOGIC;
        m_axi_featureh_AWREADY : IN STD_LOGIC;
        m_axi_featureh_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_featureh_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_featureh_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_featureh_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_featureh_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_featureh_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_featureh_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_featureh_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_featureh_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_featureh_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_WVALID : OUT STD_LOGIC;
        m_axi_featureh_WREADY : IN STD_LOGIC;
        m_axi_featureh_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_featureh_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_featureh_WLAST : OUT STD_LOGIC;
        m_axi_featureh_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_ARVALID : OUT STD_LOGIC;
        m_axi_featureh_ARREADY : IN STD_LOGIC;
        m_axi_featureh_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_featureh_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_featureh_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_featureh_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_featureh_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_featureh_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_featureh_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_featureh_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_featureh_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_featureh_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_RVALID : IN STD_LOGIC;
        m_axi_featureh_RREADY : OUT STD_LOGIC;
        m_axi_featureh_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_featureh_RLAST : IN STD_LOGIC;
        m_axi_featureh_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_featureh_BVALID : IN STD_LOGIC;
        m_axi_featureh_BREADY : OUT STD_LOGIC;
        m_axi_featureh_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_featureh_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_featureh_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        featureh1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        featureh1_empty_n : IN STD_LOGIC;
        featureh1_read : OUT STD_LOGIC;
        featureHist_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        featureHist_ce0 : OUT STD_LOGIC;
        featureHist_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component feature_featureHist IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component FIFO_feature_frame_in_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_feature_featureh_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_feature_boundingBoxes_3_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_feature_boundingBoxes_2_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_feature_boundingBoxes_1_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_feature_boundingBoxes_0_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component feature_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        frame_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        bounding : OUT STD_LOGIC_VECTOR (31 downto 0);
        featureh : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component feature_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component feature_gmem_offset_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    feature_AXILiteS_s_axi_U : component feature_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => feature_AXILiteS_s_axi_U_ap_dummy_ce,
        frame_in => frame_in,
        bounding => bounding,
        featureh => featureh);

    feature_CRTL_BUS_s_axi_U : component feature_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => feature_CRTL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    feature_gmem_m_axi_U : component feature_gmem_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => feature_gmem_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    feature_gmem_offset_m_axi_U : component feature_gmem_offset_m_axi
    generic map (
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_OFFSET_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_OFFSET_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_OFFSET_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_OFFSET_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_OFFSET_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_OFFSET_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_OFFSET_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_OFFSET_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_OFFSET_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_offset_AWVALID,
        AWREADY => m_axi_gmem_offset_AWREADY,
        AWADDR => m_axi_gmem_offset_AWADDR,
        AWID => m_axi_gmem_offset_AWID,
        AWLEN => m_axi_gmem_offset_AWLEN,
        AWSIZE => m_axi_gmem_offset_AWSIZE,
        AWBURST => m_axi_gmem_offset_AWBURST,
        AWLOCK => m_axi_gmem_offset_AWLOCK,
        AWCACHE => m_axi_gmem_offset_AWCACHE,
        AWPROT => m_axi_gmem_offset_AWPROT,
        AWQOS => m_axi_gmem_offset_AWQOS,
        AWREGION => m_axi_gmem_offset_AWREGION,
        AWUSER => m_axi_gmem_offset_AWUSER,
        WVALID => m_axi_gmem_offset_WVALID,
        WREADY => m_axi_gmem_offset_WREADY,
        WDATA => m_axi_gmem_offset_WDATA,
        WSTRB => m_axi_gmem_offset_WSTRB,
        WLAST => m_axi_gmem_offset_WLAST,
        WID => m_axi_gmem_offset_WID,
        WUSER => m_axi_gmem_offset_WUSER,
        ARVALID => m_axi_gmem_offset_ARVALID,
        ARREADY => m_axi_gmem_offset_ARREADY,
        ARADDR => m_axi_gmem_offset_ARADDR,
        ARID => m_axi_gmem_offset_ARID,
        ARLEN => m_axi_gmem_offset_ARLEN,
        ARSIZE => m_axi_gmem_offset_ARSIZE,
        ARBURST => m_axi_gmem_offset_ARBURST,
        ARLOCK => m_axi_gmem_offset_ARLOCK,
        ARCACHE => m_axi_gmem_offset_ARCACHE,
        ARPROT => m_axi_gmem_offset_ARPROT,
        ARQOS => m_axi_gmem_offset_ARQOS,
        ARREGION => m_axi_gmem_offset_ARREGION,
        ARUSER => m_axi_gmem_offset_ARUSER,
        RVALID => m_axi_gmem_offset_RVALID,
        RREADY => m_axi_gmem_offset_RREADY,
        RDATA => m_axi_gmem_offset_RDATA,
        RLAST => m_axi_gmem_offset_RLAST,
        RID => m_axi_gmem_offset_RID,
        RUSER => m_axi_gmem_offset_RUSER,
        RRESP => m_axi_gmem_offset_RRESP,
        BVALID => m_axi_gmem_offset_BVALID,
        BREADY => m_axi_gmem_offset_BREADY,
        BRESP => m_axi_gmem_offset_BRESP,
        BID => m_axi_gmem_offset_BID,
        BUSER => m_axi_gmem_offset_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => feature_gmem_offset_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_offset_ARVALID,
        I_ARREADY => gmem_offset_ARREADY,
        I_ARADDR => gmem_offset_ARADDR,
        I_ARID => gmem_offset_ARID,
        I_ARLEN => gmem_offset_ARLEN,
        I_ARSIZE => gmem_offset_ARSIZE,
        I_ARLOCK => gmem_offset_ARLOCK,
        I_ARCACHE => gmem_offset_ARCACHE,
        I_ARQOS => gmem_offset_ARQOS,
        I_ARPROT => gmem_offset_ARPROT,
        I_ARUSER => gmem_offset_ARUSER,
        I_ARBURST => gmem_offset_ARBURST,
        I_ARREGION => gmem_offset_ARREGION,
        I_RVALID => gmem_offset_RVALID,
        I_RREADY => gmem_offset_RREADY,
        I_RDATA => gmem_offset_RDATA,
        I_RID => gmem_offset_RID,
        I_RUSER => gmem_offset_RUSER,
        I_RRESP => gmem_offset_RRESP,
        I_RLAST => gmem_offset_RLAST,
        I_AWVALID => gmem_offset_AWVALID,
        I_AWREADY => gmem_offset_AWREADY,
        I_AWADDR => gmem_offset_AWADDR,
        I_AWID => gmem_offset_AWID,
        I_AWLEN => gmem_offset_AWLEN,
        I_AWSIZE => gmem_offset_AWSIZE,
        I_AWLOCK => gmem_offset_AWLOCK,
        I_AWCACHE => gmem_offset_AWCACHE,
        I_AWQOS => gmem_offset_AWQOS,
        I_AWPROT => gmem_offset_AWPROT,
        I_AWUSER => gmem_offset_AWUSER,
        I_AWBURST => gmem_offset_AWBURST,
        I_AWREGION => gmem_offset_AWREGION,
        I_WVALID => gmem_offset_WVALID,
        I_WREADY => gmem_offset_WREADY,
        I_WDATA => gmem_offset_WDATA,
        I_WID => gmem_offset_WID,
        I_WUSER => gmem_offset_WUSER,
        I_WLAST => gmem_offset_WLAST,
        I_WSTRB => gmem_offset_WSTRB,
        I_BVALID => gmem_offset_BVALID,
        I_BREADY => gmem_offset_BREADY,
        I_BRESP => gmem_offset_BRESP,
        I_BID => gmem_offset_BID,
        I_BUSER => gmem_offset_BUSER);

    featureHist_U : component feature_featureHist
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => featureHist_i_address0,
        i_ce0 => featureHist_i_ce0,
        i_we0 => featureHist_i_we0,
        i_d0 => featureHist_i_d0,
        i_q0 => featureHist_i_q0,
        i_address1 => featureHist_i_address1,
        i_ce1 => featureHist_i_ce1,
        i_we1 => featureHist_i_we1,
        i_d1 => featureHist_i_d1,
        i_q1 => featureHist_i_q1,
        t_address0 => featureHist_t_address0,
        t_ce0 => featureHist_t_ce0,
        t_we0 => featureHist_t_we0,
        t_d0 => featureHist_t_d0,
        t_q0 => featureHist_t_q0,
        t_address1 => featureHist_t_address1,
        t_ce1 => featureHist_t_ce1,
        t_we1 => featureHist_t_we1,
        t_d1 => featureHist_t_d1,
        t_q1 => featureHist_t_q1,
        i_ce => featureHist_U_ap_dummy_ce,
        t_ce => featureHist_U_ap_dummy_ce,
        i_full_n => featureHist_i_full_n,
        i_write => featureHist_i_write,
        t_empty_n => featureHist_t_empty_n,
        t_read => featureHist_t_read);

    feature_Loop_memcpy_boundingBoxes_boun_U0 : component feature_Loop_memcpy_boundingBoxes_boun
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start,
        ap_done => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done,
        ap_continue => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue,
        ap_idle => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_idle,
        ap_ready => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready,
        m_axi_bounding_AWVALID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWVALID,
        m_axi_bounding_AWREADY => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWREADY,
        m_axi_bounding_AWADDR => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWADDR,
        m_axi_bounding_AWID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWID,
        m_axi_bounding_AWLEN => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWLEN,
        m_axi_bounding_AWSIZE => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWSIZE,
        m_axi_bounding_AWBURST => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWBURST,
        m_axi_bounding_AWLOCK => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWLOCK,
        m_axi_bounding_AWCACHE => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWCACHE,
        m_axi_bounding_AWPROT => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWPROT,
        m_axi_bounding_AWQOS => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWQOS,
        m_axi_bounding_AWREGION => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWREGION,
        m_axi_bounding_AWUSER => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWUSER,
        m_axi_bounding_WVALID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WVALID,
        m_axi_bounding_WREADY => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WREADY,
        m_axi_bounding_WDATA => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WDATA,
        m_axi_bounding_WSTRB => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WSTRB,
        m_axi_bounding_WLAST => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WLAST,
        m_axi_bounding_WID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WID,
        m_axi_bounding_WUSER => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WUSER,
        m_axi_bounding_ARVALID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARVALID,
        m_axi_bounding_ARREADY => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARREADY,
        m_axi_bounding_ARADDR => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARADDR,
        m_axi_bounding_ARID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARID,
        m_axi_bounding_ARLEN => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARLEN,
        m_axi_bounding_ARSIZE => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARSIZE,
        m_axi_bounding_ARBURST => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARBURST,
        m_axi_bounding_ARLOCK => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARLOCK,
        m_axi_bounding_ARCACHE => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARCACHE,
        m_axi_bounding_ARPROT => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARPROT,
        m_axi_bounding_ARQOS => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARQOS,
        m_axi_bounding_ARREGION => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARREGION,
        m_axi_bounding_ARUSER => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARUSER,
        m_axi_bounding_RVALID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RVALID,
        m_axi_bounding_RREADY => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RREADY,
        m_axi_bounding_RDATA => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RDATA,
        m_axi_bounding_RLAST => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RLAST,
        m_axi_bounding_RID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RID,
        m_axi_bounding_RUSER => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RUSER,
        m_axi_bounding_RRESP => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RRESP,
        m_axi_bounding_BVALID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BVALID,
        m_axi_bounding_BREADY => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BREADY,
        m_axi_bounding_BRESP => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BRESP,
        m_axi_bounding_BID => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BID,
        m_axi_bounding_BUSER => feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BUSER,
        bounding1 => feature_Loop_memcpy_boundingBoxes_boun_U0_bounding1,
        frame_in => feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in,
        featureh => feature_Loop_memcpy_boundingBoxes_boun_U0_featureh,
        frame_in_out_din => feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_din,
        frame_in_out_full_n => feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_full_n,
        frame_in_out_write => feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_write,
        featureh_out_din => feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_din,
        featureh_out_full_n => feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_full_n,
        featureh_out_write => feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_write,
        ap_return_0 => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_0,
        ap_return_1 => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_1,
        ap_return_2 => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_2,
        ap_return_3 => feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_3);

    feature_Loop_memset_featureHist_proc1_U0 : component feature_Loop_memset_featureHist_proc1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => feature_Loop_memset_featureHist_proc1_U0_ap_start,
        ap_done => feature_Loop_memset_featureHist_proc1_U0_ap_done,
        ap_continue => feature_Loop_memset_featureHist_proc1_U0_ap_continue,
        ap_idle => feature_Loop_memset_featureHist_proc1_U0_ap_idle,
        ap_ready => feature_Loop_memset_featureHist_proc1_U0_ap_ready,
        featureHist_address0 => feature_Loop_memset_featureHist_proc1_U0_featureHist_address0,
        featureHist_ce0 => feature_Loop_memset_featureHist_proc1_U0_featureHist_ce0,
        featureHist_we0 => feature_Loop_memset_featureHist_proc1_U0_featureHist_we0,
        featureHist_d0 => feature_Loop_memset_featureHist_proc1_U0_featureHist_d0,
        featureHist_q0 => feature_Loop_memset_featureHist_proc1_U0_featureHist_q0,
        featureHist_address1 => feature_Loop_memset_featureHist_proc1_U0_featureHist_address1,
        featureHist_ce1 => feature_Loop_memset_featureHist_proc1_U0_featureHist_ce1,
        featureHist_we1 => feature_Loop_memset_featureHist_proc1_U0_featureHist_we1,
        featureHist_d1 => feature_Loop_memset_featureHist_proc1_U0_featureHist_d1,
        featureHist_q1 => feature_Loop_memset_featureHist_proc1_U0_featureHist_q1,
        m_axi_frame_in_AWVALID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWVALID,
        m_axi_frame_in_AWREADY => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWREADY,
        m_axi_frame_in_AWADDR => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWADDR,
        m_axi_frame_in_AWID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWID,
        m_axi_frame_in_AWLEN => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWLEN,
        m_axi_frame_in_AWSIZE => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWSIZE,
        m_axi_frame_in_AWBURST => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWBURST,
        m_axi_frame_in_AWLOCK => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWLOCK,
        m_axi_frame_in_AWCACHE => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWCACHE,
        m_axi_frame_in_AWPROT => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWPROT,
        m_axi_frame_in_AWQOS => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWQOS,
        m_axi_frame_in_AWREGION => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWREGION,
        m_axi_frame_in_AWUSER => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWUSER,
        m_axi_frame_in_WVALID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WVALID,
        m_axi_frame_in_WREADY => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WREADY,
        m_axi_frame_in_WDATA => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WDATA,
        m_axi_frame_in_WSTRB => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WSTRB,
        m_axi_frame_in_WLAST => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WLAST,
        m_axi_frame_in_WID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WID,
        m_axi_frame_in_WUSER => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WUSER,
        m_axi_frame_in_ARVALID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARVALID,
        m_axi_frame_in_ARREADY => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARREADY,
        m_axi_frame_in_ARADDR => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARADDR,
        m_axi_frame_in_ARID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARID,
        m_axi_frame_in_ARLEN => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARLEN,
        m_axi_frame_in_ARSIZE => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARSIZE,
        m_axi_frame_in_ARBURST => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARBURST,
        m_axi_frame_in_ARLOCK => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARLOCK,
        m_axi_frame_in_ARCACHE => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARCACHE,
        m_axi_frame_in_ARPROT => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARPROT,
        m_axi_frame_in_ARQOS => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARQOS,
        m_axi_frame_in_ARREGION => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARREGION,
        m_axi_frame_in_ARUSER => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARUSER,
        m_axi_frame_in_RVALID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RVALID,
        m_axi_frame_in_RREADY => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RREADY,
        m_axi_frame_in_RDATA => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RDATA,
        m_axi_frame_in_RLAST => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RLAST,
        m_axi_frame_in_RID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RID,
        m_axi_frame_in_RUSER => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RUSER,
        m_axi_frame_in_RRESP => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RRESP,
        m_axi_frame_in_BVALID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BVALID,
        m_axi_frame_in_BREADY => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BREADY,
        m_axi_frame_in_BRESP => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BRESP,
        m_axi_frame_in_BID => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BID,
        m_axi_frame_in_BUSER => feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BUSER,
        frame_in1_dout => feature_Loop_memset_featureHist_proc1_U0_frame_in1_dout,
        frame_in1_empty_n => feature_Loop_memset_featureHist_proc1_U0_frame_in1_empty_n,
        frame_in1_read => feature_Loop_memset_featureHist_proc1_U0_frame_in1_read,
        p_read => feature_Loop_memset_featureHist_proc1_U0_p_read,
        p_read1 => feature_Loop_memset_featureHist_proc1_U0_p_read1,
        p_read2 => feature_Loop_memset_featureHist_proc1_U0_p_read2,
        p_read3 => feature_Loop_memset_featureHist_proc1_U0_p_read3);

    feature_Loop_memcpy_featureh_featureHi_U0 : component feature_Loop_memcpy_featureh_featureHi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => feature_Loop_memcpy_featureh_featureHi_U0_ap_start,
        ap_done => feature_Loop_memcpy_featureh_featureHi_U0_ap_done,
        ap_continue => feature_Loop_memcpy_featureh_featureHi_U0_ap_continue,
        ap_idle => feature_Loop_memcpy_featureh_featureHi_U0_ap_idle,
        ap_ready => feature_Loop_memcpy_featureh_featureHi_U0_ap_ready,
        m_axi_featureh_AWVALID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWVALID,
        m_axi_featureh_AWREADY => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWREADY,
        m_axi_featureh_AWADDR => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWADDR,
        m_axi_featureh_AWID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWID,
        m_axi_featureh_AWLEN => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWLEN,
        m_axi_featureh_AWSIZE => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWSIZE,
        m_axi_featureh_AWBURST => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWBURST,
        m_axi_featureh_AWLOCK => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWLOCK,
        m_axi_featureh_AWCACHE => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWCACHE,
        m_axi_featureh_AWPROT => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWPROT,
        m_axi_featureh_AWQOS => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWQOS,
        m_axi_featureh_AWREGION => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWREGION,
        m_axi_featureh_AWUSER => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWUSER,
        m_axi_featureh_WVALID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WVALID,
        m_axi_featureh_WREADY => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WREADY,
        m_axi_featureh_WDATA => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WDATA,
        m_axi_featureh_WSTRB => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WSTRB,
        m_axi_featureh_WLAST => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WLAST,
        m_axi_featureh_WID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WID,
        m_axi_featureh_WUSER => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WUSER,
        m_axi_featureh_ARVALID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARVALID,
        m_axi_featureh_ARREADY => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARREADY,
        m_axi_featureh_ARADDR => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARADDR,
        m_axi_featureh_ARID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARID,
        m_axi_featureh_ARLEN => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARLEN,
        m_axi_featureh_ARSIZE => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARSIZE,
        m_axi_featureh_ARBURST => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARBURST,
        m_axi_featureh_ARLOCK => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARLOCK,
        m_axi_featureh_ARCACHE => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARCACHE,
        m_axi_featureh_ARPROT => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARPROT,
        m_axi_featureh_ARQOS => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARQOS,
        m_axi_featureh_ARREGION => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARREGION,
        m_axi_featureh_ARUSER => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARUSER,
        m_axi_featureh_RVALID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RVALID,
        m_axi_featureh_RREADY => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RREADY,
        m_axi_featureh_RDATA => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RDATA,
        m_axi_featureh_RLAST => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RLAST,
        m_axi_featureh_RID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RID,
        m_axi_featureh_RUSER => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RUSER,
        m_axi_featureh_RRESP => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RRESP,
        m_axi_featureh_BVALID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BVALID,
        m_axi_featureh_BREADY => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BREADY,
        m_axi_featureh_BRESP => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BRESP,
        m_axi_featureh_BID => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BID,
        m_axi_featureh_BUSER => feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BUSER,
        featureh1_dout => feature_Loop_memcpy_featureh_featureHi_U0_featureh1_dout,
        featureh1_empty_n => feature_Loop_memcpy_featureh_featureHi_U0_featureh1_empty_n,
        featureh1_read => feature_Loop_memcpy_featureh_featureHi_U0_featureh1_read,
        featureHist_address0 => feature_Loop_memcpy_featureh_featureHi_U0_featureHist_address0,
        featureHist_ce0 => feature_Loop_memcpy_featureh_featureHi_U0_featureHist_ce0,
        featureHist_q0 => feature_Loop_memcpy_featureh_featureHi_U0_featureHist_q0);

    frame_in_channel_U : component FIFO_feature_frame_in_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => frame_in_channel_U_ap_dummy_ce,
        if_write_ce => frame_in_channel_U_ap_dummy_ce,
        if_din => frame_in_channel_din,
        if_full_n => frame_in_channel_full_n,
        if_write => frame_in_channel_write,
        if_dout => frame_in_channel_dout,
        if_empty_n => frame_in_channel_empty_n,
        if_read => frame_in_channel_read);

    featureh_channel_U : component FIFO_feature_featureh_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => featureh_channel_U_ap_dummy_ce,
        if_write_ce => featureh_channel_U_ap_dummy_ce,
        if_din => featureh_channel_din,
        if_full_n => featureh_channel_full_n,
        if_write => featureh_channel_write,
        if_dout => featureh_channel_dout,
        if_empty_n => featureh_channel_empty_n,
        if_read => featureh_channel_read);

    boundingBoxes_3_loc_channel_U : component FIFO_feature_boundingBoxes_3_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => boundingBoxes_3_loc_channel_U_ap_dummy_ce,
        if_write_ce => boundingBoxes_3_loc_channel_U_ap_dummy_ce,
        if_din => boundingBoxes_3_loc_channel_din,
        if_full_n => boundingBoxes_3_loc_channel_full_n,
        if_write => boundingBoxes_3_loc_channel_write,
        if_dout => boundingBoxes_3_loc_channel_dout,
        if_empty_n => boundingBoxes_3_loc_channel_empty_n,
        if_read => boundingBoxes_3_loc_channel_read);

    boundingBoxes_2_loc_channel_U : component FIFO_feature_boundingBoxes_2_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => boundingBoxes_2_loc_channel_U_ap_dummy_ce,
        if_write_ce => boundingBoxes_2_loc_channel_U_ap_dummy_ce,
        if_din => boundingBoxes_2_loc_channel_din,
        if_full_n => boundingBoxes_2_loc_channel_full_n,
        if_write => boundingBoxes_2_loc_channel_write,
        if_dout => boundingBoxes_2_loc_channel_dout,
        if_empty_n => boundingBoxes_2_loc_channel_empty_n,
        if_read => boundingBoxes_2_loc_channel_read);

    boundingBoxes_1_loc_channel_U : component FIFO_feature_boundingBoxes_1_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => boundingBoxes_1_loc_channel_U_ap_dummy_ce,
        if_write_ce => boundingBoxes_1_loc_channel_U_ap_dummy_ce,
        if_din => boundingBoxes_1_loc_channel_din,
        if_full_n => boundingBoxes_1_loc_channel_full_n,
        if_write => boundingBoxes_1_loc_channel_write,
        if_dout => boundingBoxes_1_loc_channel_dout,
        if_empty_n => boundingBoxes_1_loc_channel_empty_n,
        if_read => boundingBoxes_1_loc_channel_read);

    boundingBoxes_0_loc_channel_U : component FIFO_feature_boundingBoxes_0_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => boundingBoxes_0_loc_channel_U_ap_dummy_ce,
        if_write_ce => boundingBoxes_0_loc_channel_U_ap_dummy_ce,
        if_din => boundingBoxes_0_loc_channel_din,
        if_full_n => boundingBoxes_0_loc_channel_full_n,
        if_write => boundingBoxes_0_loc_channel_write,
        if_dout => boundingBoxes_0_loc_channel_dout,
        if_empty_n => boundingBoxes_0_loc_channel_empty_n,
        if_read => boundingBoxes_0_loc_channel_read);





    -- ap_reg_procdone_feature_Loop_memcpy_boundingBoxes_boun_U0 assign process. --
    ap_reg_procdone_feature_Loop_memcpy_boundingBoxes_boun_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_feature_Loop_memcpy_boundingBoxes_boun_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_feature_Loop_memcpy_boundingBoxes_boun_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done)) then 
                    ap_reg_procdone_feature_Loop_memcpy_boundingBoxes_boun_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_feature_Loop_memcpy_featureh_featureHi_U0 assign process. --
    ap_reg_procdone_feature_Loop_memcpy_featureh_featureHi_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_feature_Loop_memcpy_featureh_featureHi_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_feature_Loop_memcpy_featureh_featureHi_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = feature_Loop_memcpy_featureh_featureHi_U0_ap_done)) then 
                    ap_reg_procdone_feature_Loop_memcpy_featureh_featureHi_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_feature_Loop_memset_featureHist_proc1_U0 assign process. --
    ap_reg_procdone_feature_Loop_memset_featureHist_proc1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_feature_Loop_memset_featureHist_proc1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_feature_Loop_memset_featureHist_proc1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = feature_Loop_memset_featureHist_proc1_U0_ap_done)) then 
                    ap_reg_procdone_feature_Loop_memset_featureHist_proc1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_boundingBoxes_0_loc_channel_full_n assign process. --
    ap_reg_ready_boundingBoxes_0_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_boundingBoxes_0_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done) and (ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue))) then 
                    ap_reg_ready_boundingBoxes_0_loc_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done) and (ap_const_logic_1 = boundingBoxes_0_loc_channel_full_n))) then 
                    ap_reg_ready_boundingBoxes_0_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_boundingBoxes_1_loc_channel_full_n assign process. --
    ap_reg_ready_boundingBoxes_1_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_boundingBoxes_1_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done) and (ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue))) then 
                    ap_reg_ready_boundingBoxes_1_loc_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done) and (ap_const_logic_1 = boundingBoxes_1_loc_channel_full_n))) then 
                    ap_reg_ready_boundingBoxes_1_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_boundingBoxes_2_loc_channel_full_n assign process. --
    ap_reg_ready_boundingBoxes_2_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_boundingBoxes_2_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done) and (ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue))) then 
                    ap_reg_ready_boundingBoxes_2_loc_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done) and (ap_const_logic_1 = boundingBoxes_2_loc_channel_full_n))) then 
                    ap_reg_ready_boundingBoxes_2_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_boundingBoxes_3_loc_channel_full_n assign process. --
    ap_reg_ready_boundingBoxes_3_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_boundingBoxes_3_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done) and (ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue))) then 
                    ap_reg_ready_boundingBoxes_3_loc_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done) and (ap_const_logic_1 = boundingBoxes_3_loc_channel_full_n))) then 
                    ap_reg_ready_boundingBoxes_3_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready assign process. --
    ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready)) then 
                    ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready assign process. --
    ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = feature_Loop_memset_featureHist_proc1_U0_ap_ready)) then 
                    ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;

    -- ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_0_loc_channel assign process. --
    ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_0_loc_channel_assign_proc : process(feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done, ap_reg_ready_boundingBoxes_0_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_boundingBoxes_0_loc_channel_full_n)) then 
            ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_0_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_0_loc_channel <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_1_loc_channel assign process. --
    ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_1_loc_channel_assign_proc : process(feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done, ap_reg_ready_boundingBoxes_1_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_boundingBoxes_1_loc_channel_full_n)) then 
            ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_1_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_1_loc_channel <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_2_loc_channel assign process. --
    ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_2_loc_channel_assign_proc : process(feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done, ap_reg_ready_boundingBoxes_2_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_boundingBoxes_2_loc_channel_full_n)) then 
            ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_2_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_2_loc_channel <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_3_loc_channel assign process. --
    ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_3_loc_channel_assign_proc : process(feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done, ap_reg_ready_boundingBoxes_3_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_boundingBoxes_3_loc_channel_full_n)) then 
            ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_3_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_3_loc_channel <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_done;
        end if; 
    end process;

    ap_chn_write_feature_Loop_memset_featureHist_proc1_U0_featureHist <= feature_Loop_memset_featureHist_proc1_U0_ap_done;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(feature_Loop_memcpy_boundingBoxes_boun_U0_ap_idle, feature_Loop_memset_featureHist_proc1_U0_ap_idle, feature_Loop_memcpy_featureh_featureHi_U0_ap_idle, featureHist_t_empty_n, boundingBoxes_3_loc_channel_empty_n, boundingBoxes_2_loc_channel_empty_n, boundingBoxes_1_loc_channel_empty_n, boundingBoxes_0_loc_channel_empty_n)
    begin
        if (((ap_const_logic_1 = feature_Loop_memcpy_boundingBoxes_boun_U0_ap_idle) and (ap_const_logic_1 = feature_Loop_memset_featureHist_proc1_U0_ap_idle) and (ap_const_logic_1 = feature_Loop_memcpy_featureh_featureHi_U0_ap_idle) and (ap_const_logic_0 = boundingBoxes_3_loc_channel_empty_n) and (ap_const_logic_0 = boundingBoxes_2_loc_channel_empty_n) and (ap_const_logic_0 = boundingBoxes_1_loc_channel_empty_n) and (ap_const_logic_0 = boundingBoxes_0_loc_channel_empty_n) and (ap_const_logic_0 = featureHist_t_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(feature_Loop_memcpy_featureh_featureHi_U0_ap_done)
    begin
        if ((ap_const_logic_1 = feature_Loop_memcpy_featureh_featureHi_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_boundingBoxes_0_loc_channel_full_n assign process. --
    ap_sig_ready_boundingBoxes_0_loc_channel_full_n_assign_proc : process(boundingBoxes_0_loc_channel_full_n, ap_reg_ready_boundingBoxes_0_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_boundingBoxes_0_loc_channel_full_n)) then 
            ap_sig_ready_boundingBoxes_0_loc_channel_full_n <= boundingBoxes_0_loc_channel_full_n;
        else 
            ap_sig_ready_boundingBoxes_0_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_boundingBoxes_1_loc_channel_full_n assign process. --
    ap_sig_ready_boundingBoxes_1_loc_channel_full_n_assign_proc : process(boundingBoxes_1_loc_channel_full_n, ap_reg_ready_boundingBoxes_1_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_boundingBoxes_1_loc_channel_full_n)) then 
            ap_sig_ready_boundingBoxes_1_loc_channel_full_n <= boundingBoxes_1_loc_channel_full_n;
        else 
            ap_sig_ready_boundingBoxes_1_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_boundingBoxes_2_loc_channel_full_n assign process. --
    ap_sig_ready_boundingBoxes_2_loc_channel_full_n_assign_proc : process(boundingBoxes_2_loc_channel_full_n, ap_reg_ready_boundingBoxes_2_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_boundingBoxes_2_loc_channel_full_n)) then 
            ap_sig_ready_boundingBoxes_2_loc_channel_full_n <= boundingBoxes_2_loc_channel_full_n;
        else 
            ap_sig_ready_boundingBoxes_2_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_boundingBoxes_3_loc_channel_full_n assign process. --
    ap_sig_ready_boundingBoxes_3_loc_channel_full_n_assign_proc : process(boundingBoxes_3_loc_channel_full_n, ap_reg_ready_boundingBoxes_3_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_boundingBoxes_3_loc_channel_full_n)) then 
            ap_sig_ready_boundingBoxes_3_loc_channel_full_n <= boundingBoxes_3_loc_channel_full_n;
        else 
            ap_sig_ready_boundingBoxes_3_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready assign process. --
    ap_sig_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready_assign_proc : process(feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready, ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready)) then 
            ap_sig_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready;
        else 
            ap_sig_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready assign process. --
    ap_sig_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready_assign_proc : process(feature_Loop_memset_featureHist_proc1_U0_ap_ready, ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready)) then 
            ap_sig_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready <= feature_Loop_memset_featureHist_proc1_U0_ap_ready;
        else 
            ap_sig_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start assign process. --
    ap_sig_start_in_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready))) then 
            ap_sig_start_in_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_feature_Loop_memset_featureHist_proc1_U0_ap_start assign process. --
    ap_sig_start_in_feature_Loop_memset_featureHist_proc1_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_feature_Loop_memset_featureHist_proc1_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_feature_Loop_memset_featureHist_proc1_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready, ap_sig_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_feature_Loop_memset_featureHist_proc1_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

    boundingBoxes_0_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    boundingBoxes_0_loc_channel_din <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_3;
    boundingBoxes_0_loc_channel_read <= feature_Loop_memset_featureHist_proc1_U0_ap_ready;
    boundingBoxes_0_loc_channel_write <= ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_0_loc_channel;
    boundingBoxes_1_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    boundingBoxes_1_loc_channel_din <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_2;
    boundingBoxes_1_loc_channel_read <= feature_Loop_memset_featureHist_proc1_U0_ap_ready;
    boundingBoxes_1_loc_channel_write <= ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_1_loc_channel;
    boundingBoxes_2_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    boundingBoxes_2_loc_channel_din <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_1;
    boundingBoxes_2_loc_channel_read <= feature_Loop_memset_featureHist_proc1_U0_ap_ready;
    boundingBoxes_2_loc_channel_write <= ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_2_loc_channel;
    boundingBoxes_3_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    boundingBoxes_3_loc_channel_din <= feature_Loop_memcpy_boundingBoxes_boun_U0_ap_return_0;
    boundingBoxes_3_loc_channel_read <= feature_Loop_memset_featureHist_proc1_U0_ap_ready;
    boundingBoxes_3_loc_channel_write <= ap_chn_write_feature_Loop_memcpy_boundingBoxes_boun_U0_boundingBoxes_3_loc_channel;
    featureHist_U_ap_dummy_ce <= ap_const_logic_1;
    featureHist_i_address0 <= feature_Loop_memset_featureHist_proc1_U0_featureHist_address0;
    featureHist_i_address1 <= feature_Loop_memset_featureHist_proc1_U0_featureHist_address1;
    featureHist_i_ce0 <= feature_Loop_memset_featureHist_proc1_U0_featureHist_ce0;
    featureHist_i_ce1 <= feature_Loop_memset_featureHist_proc1_U0_featureHist_ce1;
    featureHist_i_d0 <= feature_Loop_memset_featureHist_proc1_U0_featureHist_d0;
    featureHist_i_d1 <= feature_Loop_memset_featureHist_proc1_U0_featureHist_d1;
    featureHist_i_we0 <= feature_Loop_memset_featureHist_proc1_U0_featureHist_we0;
    featureHist_i_we1 <= feature_Loop_memset_featureHist_proc1_U0_featureHist_we1;
    featureHist_i_write <= feature_Loop_memset_featureHist_proc1_U0_ap_done;
    featureHist_t_address0 <= feature_Loop_memcpy_featureh_featureHi_U0_featureHist_address0;
    featureHist_t_address1 <= ap_const_lv9_0;
    featureHist_t_ce0 <= feature_Loop_memcpy_featureh_featureHi_U0_featureHist_ce0;
    featureHist_t_ce1 <= ap_const_logic_0;
    featureHist_t_d0 <= ap_const_lv16_0;
    featureHist_t_d1 <= ap_const_lv16_0;
    featureHist_t_read <= feature_Loop_memcpy_featureh_featureHi_U0_ap_ready;
    featureHist_t_we0 <= ap_const_logic_0;
    featureHist_t_we1 <= ap_const_logic_0;
    feature_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    feature_CRTL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue assign process. --
    feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue_assign_proc : process(ap_sig_ready_boundingBoxes_0_loc_channel_full_n, ap_sig_ready_boundingBoxes_2_loc_channel_full_n, ap_sig_ready_boundingBoxes_3_loc_channel_full_n, ap_sig_ready_boundingBoxes_1_loc_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_boundingBoxes_0_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_boundingBoxes_2_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_boundingBoxes_3_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_boundingBoxes_1_loc_channel_full_n))) then 
            feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue <= ap_const_logic_1;
        else 
            feature_Loop_memcpy_boundingBoxes_boun_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start <= ap_sig_start_in_feature_Loop_memcpy_boundingBoxes_boun_U0_ap_start;
    feature_Loop_memcpy_boundingBoxes_boun_U0_bounding1 <= bounding;
    feature_Loop_memcpy_boundingBoxes_boun_U0_featureh <= featureh;
    feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_full_n <= featureh_channel_full_n;
    feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in <= frame_in;
    feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_full_n <= frame_in_channel_full_n;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARREADY <= gmem_offset_ARREADY;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_AWREADY <= ap_const_logic_0;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BID <= ap_const_lv1_0;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BRESP <= ap_const_lv2_0;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BUSER <= ap_const_lv1_0;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_BVALID <= ap_const_logic_0;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RDATA <= gmem_offset_RDATA;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RID <= gmem_offset_RID;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RLAST <= gmem_offset_RLAST;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RRESP <= gmem_offset_RRESP;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RUSER <= gmem_offset_RUSER;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RVALID <= gmem_offset_RVALID;
    feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_WREADY <= ap_const_logic_0;
    feature_Loop_memcpy_featureh_featureHi_U0_ap_continue <= ap_sig_hs_continue;
    feature_Loop_memcpy_featureh_featureHi_U0_ap_start <= featureHist_t_empty_n;
    feature_Loop_memcpy_featureh_featureHi_U0_featureHist_q0 <= featureHist_t_q0;
    feature_Loop_memcpy_featureh_featureHi_U0_featureh1_dout <= featureh_channel_dout;
    feature_Loop_memcpy_featureh_featureHi_U0_featureh1_empty_n <= featureh_channel_empty_n;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_ARREADY <= ap_const_logic_0;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWREADY <= gmem_offset_AWREADY;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BID <= gmem_offset_BID;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BRESP <= gmem_offset_BRESP;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BUSER <= gmem_offset_BUSER;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BVALID <= gmem_offset_BVALID;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RDATA <= ap_const_lv16_0;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RID <= ap_const_lv1_0;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RLAST <= ap_const_logic_0;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RRESP <= ap_const_lv2_0;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RUSER <= ap_const_lv1_0;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_RVALID <= ap_const_logic_0;
    feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WREADY <= gmem_offset_WREADY;
    feature_Loop_memset_featureHist_proc1_U0_ap_continue <= feature_Loop_memset_featureHist_proc1_U0_featureHist_pipo_status;
    feature_Loop_memset_featureHist_proc1_U0_ap_start <= (boundingBoxes_3_loc_channel_empty_n and boundingBoxes_2_loc_channel_empty_n and boundingBoxes_1_loc_channel_empty_n and boundingBoxes_0_loc_channel_empty_n and ap_sig_start_in_feature_Loop_memset_featureHist_proc1_U0_ap_start);
    feature_Loop_memset_featureHist_proc1_U0_featureHist_pipo_status <= featureHist_i_full_n;
    feature_Loop_memset_featureHist_proc1_U0_featureHist_q0 <= featureHist_i_q0;
    feature_Loop_memset_featureHist_proc1_U0_featureHist_q1 <= featureHist_i_q1;
    feature_Loop_memset_featureHist_proc1_U0_frame_in1_dout <= frame_in_channel_dout;
    feature_Loop_memset_featureHist_proc1_U0_frame_in1_empty_n <= frame_in_channel_empty_n;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARREADY <= gmem_ARREADY;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_AWREADY <= ap_const_logic_0;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BID <= ap_const_lv1_0;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BRESP <= ap_const_lv2_0;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BUSER <= ap_const_lv1_0;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_BVALID <= ap_const_logic_0;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RDATA <= gmem_RDATA;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RID <= gmem_RID;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RLAST <= gmem_RLAST;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RRESP <= gmem_RRESP;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RUSER <= gmem_RUSER;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RVALID <= gmem_RVALID;
    feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_WREADY <= ap_const_logic_0;
    feature_Loop_memset_featureHist_proc1_U0_p_read <= boundingBoxes_0_loc_channel_dout;
    feature_Loop_memset_featureHist_proc1_U0_p_read1 <= boundingBoxes_3_loc_channel_dout;
    feature_Loop_memset_featureHist_proc1_U0_p_read2 <= boundingBoxes_2_loc_channel_dout;
    feature_Loop_memset_featureHist_proc1_U0_p_read3 <= boundingBoxes_1_loc_channel_dout;
    feature_gmem_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    feature_gmem_offset_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    featureh_channel_U_ap_dummy_ce <= ap_const_logic_1;
    featureh_channel_din <= feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_din;
    featureh_channel_read <= feature_Loop_memcpy_featureh_featureHi_U0_featureh1_read;
    featureh_channel_write <= feature_Loop_memcpy_boundingBoxes_boun_U0_featureh_out_write;
    frame_in_channel_U_ap_dummy_ce <= ap_const_logic_1;
    frame_in_channel_din <= feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_din;
    frame_in_channel_read <= feature_Loop_memset_featureHist_proc1_U0_frame_in1_read;
    frame_in_channel_write <= feature_Loop_memcpy_boundingBoxes_boun_U0_frame_in_out_write;
    gmem_ARADDR <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARADDR;
    gmem_ARBURST <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARBURST;
    gmem_ARCACHE <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARCACHE;
    gmem_ARID <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARID;
    gmem_ARLEN <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARLEN;
    gmem_ARLOCK <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARLOCK;
    gmem_ARPROT <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARPROT;
    gmem_ARQOS <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARQOS;
    gmem_ARREGION <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARREGION;
    gmem_ARSIZE <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARSIZE;
    gmem_ARUSER <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARUSER;
    gmem_ARVALID <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_ARVALID;
    gmem_AWADDR <= ap_const_lv32_0;
    gmem_AWBURST <= ap_const_lv2_0;
    gmem_AWCACHE <= ap_const_lv4_0;
    gmem_AWID <= ap_const_lv1_0;
    gmem_AWLEN <= ap_const_lv32_0;
    gmem_AWLOCK <= ap_const_lv2_0;
    gmem_AWPROT <= ap_const_lv3_0;
    gmem_AWQOS <= ap_const_lv4_0;
    gmem_AWREGION <= ap_const_lv4_0;
    gmem_AWSIZE <= ap_const_lv3_0;
    gmem_AWUSER <= ap_const_lv1_0;
    gmem_AWVALID <= ap_const_logic_0;
    gmem_BREADY <= ap_const_logic_0;
    gmem_RREADY <= feature_Loop_memset_featureHist_proc1_U0_m_axi_frame_in_RREADY;
    gmem_WDATA <= ap_const_lv8_0;
    gmem_WID <= ap_const_lv1_0;
    gmem_WLAST <= ap_const_logic_0;
    gmem_WSTRB <= ap_const_lv1_0;
    gmem_WUSER <= ap_const_lv1_0;
    gmem_WVALID <= ap_const_logic_0;
    gmem_offset_ARADDR <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARADDR;
    gmem_offset_ARBURST <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARBURST;
    gmem_offset_ARCACHE <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARCACHE;
    gmem_offset_ARID <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARID;
    gmem_offset_ARLEN <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARLEN;
    gmem_offset_ARLOCK <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARLOCK;
    gmem_offset_ARPROT <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARPROT;
    gmem_offset_ARQOS <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARQOS;
    gmem_offset_ARREGION <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARREGION;
    gmem_offset_ARSIZE <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARSIZE;
    gmem_offset_ARUSER <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARUSER;
    gmem_offset_ARVALID <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_ARVALID;
    gmem_offset_AWADDR <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWADDR;
    gmem_offset_AWBURST <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWBURST;
    gmem_offset_AWCACHE <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWCACHE;
    gmem_offset_AWID <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWID;
    gmem_offset_AWLEN <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWLEN;
    gmem_offset_AWLOCK <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWLOCK;
    gmem_offset_AWPROT <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWPROT;
    gmem_offset_AWQOS <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWQOS;
    gmem_offset_AWREGION <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWREGION;
    gmem_offset_AWSIZE <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWSIZE;
    gmem_offset_AWUSER <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWUSER;
    gmem_offset_AWVALID <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_AWVALID;
    gmem_offset_BREADY <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_BREADY;
    gmem_offset_RREADY <= feature_Loop_memcpy_boundingBoxes_boun_U0_m_axi_bounding_RREADY;
    gmem_offset_WDATA <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WDATA;
    gmem_offset_WID <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WID;
    gmem_offset_WLAST <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WLAST;
    gmem_offset_WSTRB <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WSTRB;
    gmem_offset_WUSER <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WUSER;
    gmem_offset_WVALID <= feature_Loop_memcpy_featureh_featureHi_U0_m_axi_featureh_WVALID;
end behav;
