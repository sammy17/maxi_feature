-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feature_Loop_memcpy_boundingBoxes_boun is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_bounding_AWVALID : OUT STD_LOGIC;
    m_axi_bounding_AWREADY : IN STD_LOGIC;
    m_axi_bounding_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bounding_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bounding_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bounding_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bounding_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bounding_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bounding_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bounding_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bounding_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bounding_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_WVALID : OUT STD_LOGIC;
    m_axi_bounding_WREADY : IN STD_LOGIC;
    m_axi_bounding_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_bounding_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bounding_WLAST : OUT STD_LOGIC;
    m_axi_bounding_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_ARVALID : OUT STD_LOGIC;
    m_axi_bounding_ARREADY : IN STD_LOGIC;
    m_axi_bounding_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bounding_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bounding_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bounding_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bounding_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bounding_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bounding_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bounding_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bounding_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bounding_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_RVALID : IN STD_LOGIC;
    m_axi_bounding_RREADY : OUT STD_LOGIC;
    m_axi_bounding_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_bounding_RLAST : IN STD_LOGIC;
    m_axi_bounding_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bounding_BVALID : IN STD_LOGIC;
    m_axi_bounding_BREADY : OUT STD_LOGIC;
    m_axi_bounding_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bounding_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bounding_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bounding1 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame_in : IN STD_LOGIC_VECTOR (31 downto 0);
    featureh : IN STD_LOGIC_VECTOR (31 downto 0);
    frame_in_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    frame_in_out_full_n : IN STD_LOGIC;
    frame_in_out_write : OUT STD_LOGIC;
    featureh_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    featureh_out_full_n : IN STD_LOGIC;
    featureh_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of feature_Loop_memcpy_boundingBoxes_boun is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp0_stg0_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st11_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_28 : BOOLEAN;
    signal boundingBoxes_3_out_i_i_reg_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_2_out_i_i_reg_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_3_2_reg_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_3_5_reg_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_i_i_i_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_122 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_bounding_ARREADY : STD_LOGIC;
    signal exitcond_i_i_i_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_i_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_i_i_i_reg_316_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_i_i_i_fu_210_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_216_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_reg_325 : STD_LOGIC_VECTOR (1 downto 0);
    signal boundingBoxes_0_reg_332 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp_i_i_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_i_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_i_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_i_reg_346 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_i_i_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_i_i_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal boundingBoxes_3_fu_245_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_3_1_fu_259_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_3_4_fu_273_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_3_6_fu_280_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_185 : BOOLEAN;
    signal ap_sig_bdd_190 : BOOLEAN;
    signal tmp_11_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_bounding_ARREADY : STD_LOGIC := '0';
    signal tmp_fu_183_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_cond_i_i_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_i_i_fu_239_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel_i_i_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal boundingBoxes_3_3_fu_267_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_281 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_bdd_372 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_bounding_ARREADY assign process. --
    ap_reg_ioackin_m_axi_bounding_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_bounding_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not((ap_sig_bdd_122 or (ap_const_logic_0 = ap_sig_ioackin_m_axi_bounding_ARREADY)))) then 
                        ap_reg_ioackin_m_axi_bounding_ARREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_372) then 
                        ap_reg_ioackin_m_axi_bounding_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_i_i_i_fu_204_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not(ap_sig_bdd_190))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_i_i_i_fu_204_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not(ap_sig_bdd_190)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_i_i_i_fu_204_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not(ap_sig_bdd_190))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar_i_i_i_reg_172 assign process. --
    indvar_i_i_i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_i_i_i_fu_204_p2))) then 
                indvar_i_i_i_reg_172 <= indvar_next_i_i_i_fu_210_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not(ap_sig_bdd_190))) then 
                indvar_i_i_i_reg_172 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond_i_i_i_reg_316_pp0_it1 <= exitcond_i_i_i_reg_316;
                exitcond_i_i_i_reg_316 <= exitcond_i_i_i_fu_204_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (ap_const_lv1_0 = exitcond_i_i_i_reg_316) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                boundingBoxes_0_reg_332 <= m_axi_bounding_RDATA;
                sel_tmp2_i_i_reg_346 <= sel_tmp2_i_i_fu_225_p2;
                sel_tmp4_i_i_reg_352 <= sel_tmp4_i_i_fu_230_p2;
                sel_tmp_i_i_reg_340 <= sel_tmp_i_i_fu_220_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_i_i_reg_316_pp0_it1))) then
                boundingBoxes_2_out_i_i_reg_136 <= boundingBoxes_3_1_fu_259_p3;
                boundingBoxes_3_2_reg_148 <= boundingBoxes_3_4_fu_273_p3;
                boundingBoxes_3_5_reg_160 <= boundingBoxes_3_6_fu_280_p3;
                boundingBoxes_3_out_i_i_reg_124 <= boundingBoxes_3_fu_245_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_i_i_i_fu_204_p2))) then
                tmp_12_reg_325 <= tmp_12_fu_216_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_122, ap_sig_ioackin_m_axi_bounding_ARREADY, exitcond_i_i_i_fu_204_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_142, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_190)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_sig_bdd_122 or (ap_const_logic_0 = ap_sig_ioackin_m_axi_bounding_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not(ap_sig_bdd_190)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_pp0_stg0_fsm_7 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_i_i_i_fu_204_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_i_i_i_fu_204_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
                end if;
            when ap_ST_st11_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st11_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= boundingBoxes_3_out_i_i_reg_124;
    ap_return_1 <= boundingBoxes_2_out_i_i_reg_136;
    ap_return_2 <= boundingBoxes_3_2_reg_148;
    ap_return_3 <= boundingBoxes_3_5_reg_160;

    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_122 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(m_axi_bounding_RVALID, exitcond_i_i_i_reg_316)
    begin
                ap_sig_bdd_142 <= ((m_axi_bounding_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond_i_i_i_reg_316));
    end process;


    -- ap_sig_bdd_185 assign process. --
    ap_sig_bdd_185_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_185 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_190 assign process. --
    ap_sig_bdd_190_assign_proc : process(frame_in_out_full_n, featureh_out_full_n)
    begin
                ap_sig_bdd_190 <= ((frame_in_out_full_n = ap_const_logic_0) or (featureh_out_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_28 assign process. --
    ap_sig_bdd_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_281 assign process. --
    ap_sig_bdd_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_281 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_372 assign process. --
    ap_sig_bdd_372_assign_proc : process(m_axi_bounding_ARREADY, ap_sig_bdd_122)
    begin
                ap_sig_bdd_372 <= ((ap_const_logic_1 = m_axi_bounding_ARREADY) and not(ap_sig_bdd_122));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_7_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_8 assign process. --
    ap_sig_cseq_ST_st11_fsm_8_assign_proc : process(ap_sig_bdd_281)
    begin
        if (ap_sig_bdd_281) then 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_28)
    begin
        if (ap_sig_bdd_28) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_185)
    begin
        if (ap_sig_bdd_185) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_bounding_ARREADY assign process. --
    ap_sig_ioackin_m_axi_bounding_ARREADY_assign_proc : process(m_axi_bounding_ARREADY, ap_reg_ioackin_m_axi_bounding_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_bounding_ARREADY)) then 
            ap_sig_ioackin_m_axi_bounding_ARREADY <= m_axi_bounding_ARREADY;
        else 
            ap_sig_ioackin_m_axi_bounding_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    boundingBoxes_3_1_fu_259_p3 <= 
        boundingBoxes_2_out_i_i_reg_136 when (or_cond_i_i_fu_235_p2(0) = '1') else 
        newSel_i_i_fu_253_p3;
    boundingBoxes_3_3_fu_267_p3 <= 
        boundingBoxes_0_reg_332 when (sel_tmp2_i_i_reg_346(0) = '1') else 
        boundingBoxes_3_2_reg_148;
    boundingBoxes_3_4_fu_273_p3 <= 
        boundingBoxes_3_2_reg_148 when (sel_tmp4_i_i_reg_352(0) = '1') else 
        boundingBoxes_3_3_fu_267_p3;
    boundingBoxes_3_6_fu_280_p3 <= 
        boundingBoxes_0_reg_332 when (sel_tmp4_i_i_reg_352(0) = '1') else 
        boundingBoxes_3_5_reg_160;
    boundingBoxes_3_fu_245_p3 <= 
        boundingBoxes_3_out_i_i_reg_124 when (or_cond_i_i_fu_235_p2(0) = '1') else 
        newSel4_i_i_fu_239_p3;
    exitcond_i_i_i_fu_204_p2 <= "1" when (indvar_i_i_i_reg_172 = ap_const_lv3_4) else "0";
    featureh_out_din <= featureh;

    -- featureh_out_write assign process. --
    featureh_out_write_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_bdd_190)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not(ap_sig_bdd_190))) then 
            featureh_out_write <= ap_const_logic_1;
        else 
            featureh_out_write <= ap_const_logic_0;
        end if; 
    end process;

    frame_in_out_din <= frame_in;

    -- frame_in_out_write assign process. --
    frame_in_out_write_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_bdd_190)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not(ap_sig_bdd_190))) then 
            frame_in_out_write <= ap_const_logic_1;
        else 
            frame_in_out_write <= ap_const_logic_0;
        end if; 
    end process;

    indvar_next_i_i_i_fu_210_p2 <= std_logic_vector(unsigned(indvar_i_i_i_reg_172) + unsigned(ap_const_lv3_1));
    m_axi_bounding_ARADDR <= tmp_11_fu_193_p1(32 - 1 downto 0);
    m_axi_bounding_ARBURST <= ap_const_lv2_0;
    m_axi_bounding_ARCACHE <= ap_const_lv4_0;
    m_axi_bounding_ARID <= ap_const_lv1_0;
    m_axi_bounding_ARLEN <= ap_const_lv32_4;
    m_axi_bounding_ARLOCK <= ap_const_lv2_0;
    m_axi_bounding_ARPROT <= ap_const_lv3_0;
    m_axi_bounding_ARQOS <= ap_const_lv4_0;
    m_axi_bounding_ARREGION <= ap_const_lv4_0;
    m_axi_bounding_ARSIZE <= ap_const_lv3_0;
    m_axi_bounding_ARUSER <= ap_const_lv1_0;

    -- m_axi_bounding_ARVALID assign process. --
    m_axi_bounding_ARVALID_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_122, ap_reg_ioackin_m_axi_bounding_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_122) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bounding_ARREADY))) then 
            m_axi_bounding_ARVALID <= ap_const_logic_1;
        else 
            m_axi_bounding_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bounding_AWADDR <= ap_const_lv32_0;
    m_axi_bounding_AWBURST <= ap_const_lv2_0;
    m_axi_bounding_AWCACHE <= ap_const_lv4_0;
    m_axi_bounding_AWID <= ap_const_lv1_0;
    m_axi_bounding_AWLEN <= ap_const_lv32_0;
    m_axi_bounding_AWLOCK <= ap_const_lv2_0;
    m_axi_bounding_AWPROT <= ap_const_lv3_0;
    m_axi_bounding_AWQOS <= ap_const_lv4_0;
    m_axi_bounding_AWREGION <= ap_const_lv4_0;
    m_axi_bounding_AWSIZE <= ap_const_lv3_0;
    m_axi_bounding_AWUSER <= ap_const_lv1_0;
    m_axi_bounding_AWVALID <= ap_const_logic_0;
    m_axi_bounding_BREADY <= ap_const_logic_0;

    -- m_axi_bounding_RREADY assign process. --
    m_axi_bounding_RREADY_assign_proc : process(exitcond_i_i_i_reg_316, ap_sig_cseq_ST_pp0_stg0_fsm_7, ap_sig_bdd_142, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (ap_const_lv1_0 = exitcond_i_i_i_reg_316) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_142 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            m_axi_bounding_RREADY <= ap_const_logic_1;
        else 
            m_axi_bounding_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bounding_WDATA <= ap_const_lv16_0;
    m_axi_bounding_WID <= ap_const_lv1_0;
    m_axi_bounding_WLAST <= ap_const_logic_0;
    m_axi_bounding_WSTRB <= ap_const_lv2_0;
    m_axi_bounding_WUSER <= ap_const_lv1_0;
    m_axi_bounding_WVALID <= ap_const_logic_0;
    newSel4_i_i_fu_239_p3 <= 
        boundingBoxes_3_out_i_i_reg_124 when (sel_tmp_i_i_reg_340(0) = '1') else 
        boundingBoxes_0_reg_332;
    newSel_i_i_fu_253_p3 <= 
        boundingBoxes_0_reg_332 when (sel_tmp_i_i_reg_340(0) = '1') else 
        boundingBoxes_2_out_i_i_reg_136;
    or_cond_i_i_fu_235_p2 <= (sel_tmp4_i_i_reg_352 or sel_tmp2_i_i_reg_346);
    sel_tmp2_i_i_fu_225_p2 <= "1" when (tmp_12_reg_325 = ap_const_lv2_1) else "0";
    sel_tmp4_i_i_fu_230_p2 <= "1" when (tmp_12_reg_325 = ap_const_lv2_0) else "0";
    sel_tmp_i_i_fu_220_p2 <= "1" when (tmp_12_reg_325 = ap_const_lv2_2) else "0";
    tmp_11_fu_193_p1 <= std_logic_vector(resize(unsigned(tmp_fu_183_p4),64));
    tmp_12_fu_216_p1 <= indvar_i_i_i_reg_172(2 - 1 downto 0);
    tmp_fu_183_p4 <= bounding1(31 downto 1);
end behav;
