// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "gmem"
#define AUTOTB_TVIN_gmem  "../tv/cdatafile/c.feature.autotvin_gmem.dat"
// wrapc file define: "gmem_offset"
#define AUTOTB_TVIN_gmem_offset  "../tv/cdatafile/c.feature.autotvin_gmem_offset.dat"
#define AUTOTB_TVOUT_gmem_offset  "../tv/cdatafile/c.feature.autotvout_gmem_offset.dat"
// wrapc file define: "frame_in"
#define AUTOTB_TVIN_frame_in  "../tv/cdatafile/c.feature.autotvin_frame_in.dat"
// wrapc file define: "bounding"
#define AUTOTB_TVIN_bounding  "../tv/cdatafile/c.feature.autotvin_bounding.dat"
// wrapc file define: "featureh"
#define AUTOTB_TVIN_featureh  "../tv/cdatafile/c.feature.autotvin_featureh.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "gmem_offset"
#define AUTOTB_TVOUT_PC_gmem_offset  "../tv/rtldatafile/rtl.feature.autotvout_gmem_offset.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			gmem_depth = 0;
			gmem_offset_depth = 0;
			frame_in_depth = 0;
			bounding_depth = 0;
			featureh_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{gmem " << gmem_depth << "}\n";
			total_list << "{gmem_offset " << gmem_offset_depth << "}\n";
			total_list << "{frame_in " << frame_in_depth << "}\n";
			total_list << "{bounding " << bounding_depth << "}\n";
			total_list << "{featureh " << featureh_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int gmem_depth;
		int gmem_offset_depth;
		int frame_in_depth;
		int bounding_depth;
		int featureh_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define feature AESL_ORIG_DUT_feature
extern void feature (
unsigned char* frame_in,
unsigned short* bounding,
unsigned short* featureh);
#undef feature

void feature (
unsigned char* frame_in,
unsigned short* bounding,
unsigned short* featureh)
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "gmem_offset"
		aesl_fh.read(AUTOTB_TVOUT_PC_gmem_offset, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_gmem_offset, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_gmem_offset, AESL_token); // data

			sc_bv<16> *gmem_offset_pc_buffer = new sc_bv<16>[5160];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'gmem_offset', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'gmem_offset', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					gmem_offset_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_gmem_offset, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_gmem_offset))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: gmem_offset
				{
					// bitslice(15, 0)
					// {
						// celement: bounding(15, 0)
						// {
							sc_lv<16>* bounding_lv0_0_39_1 = new sc_lv<16>[5160];
						// }
						// celement: featureh(15, 0)
						// {
							sc_lv<16>* featureh_lv0_0_5119_1 = new sc_lv<16>[5160];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: bounding(15, 0)
						{
							// carray: (0) => (39) @ (1)
							for (int i_0 = 0; i_0 <= 39; i_0 += 1)
							{
								hls_map_index++;
							}
						}
						// celement: featureh(15, 0)
						{
							// carray: (0) => (5119) @ (1)
							for (int i_0 = 0; i_0 <= 5119; i_0 += 1)
							{
								if (&(featureh[0]) != NULL) // check the null address if the c port is array or others
								{
									featureh_lv0_0_5119_1[hls_map_index++].range(15, 0) = sc_bv<16>(gmem_offset_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: bounding(15, 0)
						{
							// carray: (0) => (39) @ (1)
							for (int i_0 = 0; i_0 <= 39; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : bounding[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : bounding[0]
								// output_left_conversion : bounding[i_0]
								// output_type_conversion : (bounding_lv0_0_39_1[hls_map_index++]).to_uint64()
								hls_map_index++;
							}
						}
						// celement: featureh(15, 0)
						{
							// carray: (0) => (5119) @ (1)
							for (int i_0 = 0; i_0 <= 5119; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : featureh[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : featureh[0]
								// output_left_conversion : featureh[i_0]
								// output_type_conversion : (featureh_lv0_0_5119_1[hls_map_index++]).to_uint64()
								if (&(featureh[0]) != NULL) // check the null address if the c port is array or others
								{
									featureh[i_0] = (featureh_lv0_0_5119_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] gmem_offset_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "gmem"
		char* tvin_gmem = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_gmem);

		// "gmem_offset"
		char* tvin_gmem_offset = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_gmem_offset);
		char* tvout_gmem_offset = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_gmem_offset);

		// "frame_in"
		char* tvin_frame_in = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_frame_in);

		// "bounding"
		char* tvin_bounding = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_bounding);

		// "featureh"
		char* tvin_featureh = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_featureh);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_gmem, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

		sc_bv<8>* gmem_tvin_wrapc_buffer = new sc_bv<8>[230400];

		// RTL Name: gmem
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: frame_in(7, 0)
				{
					// carray: (0) => (230399) @ (1)
					for (int i_0 = 0; i_0 <= 230399; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : frame_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : frame_in[0]
						// regulate_c_name       : frame_in
						// input_type_conversion : frame_in[i_0]
						if (&(frame_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> frame_in_tmp_mem;
							frame_in_tmp_mem = frame_in[i_0];
							gmem_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = frame_in_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 230400; i++)
		{
			sprintf(tvin_gmem, "%s\n", (gmem_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);
		}

		tcl_file.set_num(230400, &tcl_file.gmem_depth);
		sprintf(tvin_gmem, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

		// release memory allocation
		delete [] gmem_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_gmem_offset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_gmem_offset, tvin_gmem_offset);

		sc_bv<16>* gmem_offset_tvin_wrapc_buffer = new sc_bv<16>[5160];

		// RTL Name: gmem_offset
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: bounding(15, 0)
				{
					// carray: (0) => (39) @ (1)
					for (int i_0 = 0; i_0 <= 39; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : bounding[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : bounding[0]
						// regulate_c_name       : bounding
						// input_type_conversion : bounding[i_0]
						if (&(bounding[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> bounding_tmp_mem;
							bounding_tmp_mem = bounding[i_0];
							gmem_offset_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = bounding_tmp_mem.range(15, 0);
						}
					}
				}
				// celement: featureh(15, 0)
				{
					// carray: (0) => (5119) @ (1)
					for (int i_0 = 0; i_0 <= 5119; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : featureh[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : featureh[0]
						// regulate_c_name       : featureh
						// input_type_conversion : featureh[i_0]
						if (&(featureh[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> featureh_tmp_mem;
							featureh_tmp_mem = featureh[i_0];
							gmem_offset_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = featureh_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 5160; i++)
		{
			sprintf(tvin_gmem_offset, "%s\n", (gmem_offset_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_gmem_offset, tvin_gmem_offset);
		}

		tcl_file.set_num(5160, &tcl_file.gmem_offset_depth);
		sprintf(tvin_gmem_offset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_gmem_offset, tvin_gmem_offset);

		// release memory allocation
		delete [] gmem_offset_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_frame_in, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_frame_in, tvin_frame_in);

		sc_bv<32> frame_in_tvin_wrapc_buffer;

		// RTL Name: frame_in
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_frame_in, "%s\n", (frame_in_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_frame_in, tvin_frame_in);
		}

		tcl_file.set_num(1, &tcl_file.frame_in_depth);
		sprintf(tvin_frame_in, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_frame_in, tvin_frame_in);

		// [[transaction]]
		sprintf(tvin_bounding, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_bounding, tvin_bounding);

		sc_bv<32> bounding_tvin_wrapc_buffer;

		// RTL Name: bounding
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_bounding, "%s\n", (bounding_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_bounding, tvin_bounding);
		}

		tcl_file.set_num(1, &tcl_file.bounding_depth);
		sprintf(tvin_bounding, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_bounding, tvin_bounding);

		// [[transaction]]
		sprintf(tvin_featureh, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_featureh, tvin_featureh);

		sc_bv<32> featureh_tvin_wrapc_buffer;

		// RTL Name: featureh
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_featureh, "%s\n", (featureh_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_featureh, tvin_featureh);
		}

		tcl_file.set_num(1, &tcl_file.featureh_depth);
		sprintf(tvin_featureh, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_featureh, tvin_featureh);

// [call_c_dut] ---------->

		AESL_ORIG_DUT_feature(frame_in, bounding, featureh);


		// [[transaction]]
		sprintf(tvout_gmem_offset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_gmem_offset, tvout_gmem_offset);

		sc_bv<16>* gmem_offset_tvout_wrapc_buffer = new sc_bv<16>[5160];

		// RTL Name: gmem_offset
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: bounding(15, 0)
				{
					// carray: (0) => (39) @ (1)
					for (int i_0 = 0; i_0 <= 39; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : bounding[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : bounding[0]
						// regulate_c_name       : bounding
						// input_type_conversion : bounding[i_0]
						if (&(bounding[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> bounding_tmp_mem;
							bounding_tmp_mem = bounding[i_0];
							gmem_offset_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = bounding_tmp_mem.range(15, 0);
						}
					}
				}
				// celement: featureh(15, 0)
				{
					// carray: (0) => (5119) @ (1)
					for (int i_0 = 0; i_0 <= 5119; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : featureh[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : featureh[0]
						// regulate_c_name       : featureh
						// input_type_conversion : featureh[i_0]
						if (&(featureh[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> featureh_tmp_mem;
							featureh_tmp_mem = featureh[i_0];
							gmem_offset_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = featureh_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 5160; i++)
		{
			sprintf(tvout_gmem_offset, "%s\n", (gmem_offset_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_gmem_offset, tvout_gmem_offset);
		}

		tcl_file.set_num(5160, &tcl_file.gmem_offset_depth);
		sprintf(tvout_gmem_offset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_gmem_offset, tvout_gmem_offset);

		// release memory allocation
		delete [] gmem_offset_tvout_wrapc_buffer;

		// release memory allocation: "gmem"
		delete [] tvin_gmem;
		// release memory allocation: "gmem_offset"
		delete [] tvin_gmem_offset;
		delete [] tvout_gmem_offset;
		// release memory allocation: "frame_in"
		delete [] tvin_frame_in;
		// release memory allocation: "bounding"
		delete [] tvin_bounding;
		// release memory allocation: "featureh"
		delete [] tvin_featureh;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

