-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feature_Loop_memcpy_featureh_featureHi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_featureh_AWVALID : OUT STD_LOGIC;
    m_axi_featureh_AWREADY : IN STD_LOGIC;
    m_axi_featureh_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_featureh_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_featureh_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_featureh_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_featureh_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_featureh_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_featureh_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_featureh_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_featureh_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_featureh_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_WVALID : OUT STD_LOGIC;
    m_axi_featureh_WREADY : IN STD_LOGIC;
    m_axi_featureh_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_featureh_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_featureh_WLAST : OUT STD_LOGIC;
    m_axi_featureh_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_ARVALID : OUT STD_LOGIC;
    m_axi_featureh_ARREADY : IN STD_LOGIC;
    m_axi_featureh_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_featureh_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_featureh_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_featureh_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_featureh_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_featureh_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_featureh_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_featureh_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_featureh_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_featureh_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_RVALID : IN STD_LOGIC;
    m_axi_featureh_RREADY : OUT STD_LOGIC;
    m_axi_featureh_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_featureh_RLAST : IN STD_LOGIC;
    m_axi_featureh_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_featureh_BVALID : IN STD_LOGIC;
    m_axi_featureh_BREADY : OUT STD_LOGIC;
    m_axi_featureh_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_featureh_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_featureh_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    featureh1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    featureh1_empty_n : IN STD_LOGIC;
    featureh1_read : OUT STD_LOGIC;
    featureHist_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    featureHist_ce0 : OUT STD_LOGIC;
    featureHist_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of feature_Loop_memcpy_featureh_featureHi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st6_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st7_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st8_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st9_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_27 : BOOLEAN;
    signal indvar1_i_reg_95 : STD_LOGIC_VECTOR (9 downto 0);
    signal featureh_addr_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_108 : BOOLEAN;
    signal exitcond4_i_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_i_reg_148 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_118 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_featureh_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar_next1_i_fu_132_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal featureHist_load_reg_162 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_featureh_AWREADY : STD_LOGIC;
    signal tmp_4_i_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_featureh_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_featureh_WREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st10_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal tmp_fu_106_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_bdd_176 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((m_axi_featureh_BVALID = ap_const_logic_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_featureh_AWREADY assign process. --
    ap_reg_ioackin_m_axi_featureh_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_featureh_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_AWREADY))) then 
                        ap_reg_ioackin_m_axi_featureh_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_featureh_AWREADY)) then 
                        ap_reg_ioackin_m_axi_featureh_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_featureh_WREADY assign process. --
    ap_reg_ioackin_m_axi_featureh_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_featureh_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_176) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then 
                        ap_reg_ioackin_m_axi_featureh_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_featureh_WREADY)) then 
                        ap_reg_ioackin_m_axi_featureh_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = exitcond4_i_fu_126_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_AWREADY)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_lv1_0 = exitcond4_i_fu_126_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_AWREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = exitcond4_i_fu_126_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_AWREADY)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar1_i_reg_95 assign process. --
    indvar1_i_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_AWREADY)))) then 
                indvar1_i_reg_95 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_lv1_0 = exitcond4_i_fu_126_p2))) then 
                indvar1_i_reg_95 <= indvar_next1_i_fu_132_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1 <= exitcond4_i_reg_148;
                exitcond4_i_reg_148 <= exitcond4_i_fu_126_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_lv1_0 = exitcond4_i_reg_148))) then
                featureHist_load_reg_162 <= featureHist_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_108))) then
                    featureh_addr_reg_143(30 downto 0) <= tmp_10_fu_116_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;
    featureh_addr_reg_143(31) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, m_axi_featureh_BVALID, ap_sig_bdd_108, exitcond4_i_fu_126_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1, ap_sig_ioackin_m_axi_featureh_WREADY, ap_reg_ppiten_pp0_it2, ap_sig_ioackin_m_axi_featureh_AWREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_108)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_AWREADY))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = exitcond4_i_fu_126_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = exitcond4_i_fu_126_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st6_fsm_3 => 
                ap_NS_fsm <= ap_ST_st7_fsm_4;
            when ap_ST_st7_fsm_4 => 
                ap_NS_fsm <= ap_ST_st8_fsm_5;
            when ap_ST_st8_fsm_5 => 
                ap_NS_fsm <= ap_ST_st9_fsm_6;
            when ap_ST_st9_fsm_6 => 
                ap_NS_fsm <= ap_ST_st10_fsm_7;
            when ap_ST_st10_fsm_7 => 
                if (not((m_axi_featureh_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, m_axi_featureh_BVALID, ap_sig_cseq_ST_st10_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((m_axi_featureh_BVALID = ap_const_logic_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(m_axi_featureh_BVALID, ap_sig_cseq_ST_st10_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((m_axi_featureh_BVALID = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(ap_start, ap_done_reg, featureh1_empty_n)
    begin
                ap_sig_bdd_108 <= ((featureh1_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_118 assign process. --
    ap_sig_bdd_118_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_118 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_151 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
                ap_sig_bdd_176 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_27 assign process. --
    ap_sig_bdd_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_118)
    begin
        if (ap_sig_bdd_118) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_7 assign process. --
    ap_sig_cseq_ST_st10_fsm_7_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_27)
    begin
        if (ap_sig_bdd_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_151)
    begin
        if (ap_sig_bdd_151) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_featureh_AWREADY assign process. --
    ap_sig_ioackin_m_axi_featureh_AWREADY_assign_proc : process(m_axi_featureh_AWREADY, ap_reg_ioackin_m_axi_featureh_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_featureh_AWREADY)) then 
            ap_sig_ioackin_m_axi_featureh_AWREADY <= m_axi_featureh_AWREADY;
        else 
            ap_sig_ioackin_m_axi_featureh_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_featureh_WREADY assign process. --
    ap_sig_ioackin_m_axi_featureh_WREADY_assign_proc : process(m_axi_featureh_WREADY, ap_reg_ioackin_m_axi_featureh_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_featureh_WREADY)) then 
            ap_sig_ioackin_m_axi_featureh_WREADY <= m_axi_featureh_WREADY;
        else 
            ap_sig_ioackin_m_axi_featureh_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond4_i_fu_126_p2 <= "1" when (indvar1_i_reg_95 = ap_const_lv10_200) else "0";
    featureHist_address0 <= tmp_4_i_fu_138_p1(9 - 1 downto 0);

    -- featureHist_ce0 assign process. --
    featureHist_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1, ap_sig_ioackin_m_axi_featureh_WREADY, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_featureh_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
            featureHist_ce0 <= ap_const_logic_1;
        else 
            featureHist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- featureh1_read assign process. --
    featureh1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_108)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_108))) then 
            featureh1_read <= ap_const_logic_1;
        else 
            featureh1_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_next1_i_fu_132_p2 <= std_logic_vector(unsigned(indvar1_i_reg_95) + unsigned(ap_const_lv10_1));
    m_axi_featureh_ARADDR <= ap_const_lv32_0;
    m_axi_featureh_ARBURST <= ap_const_lv2_0;
    m_axi_featureh_ARCACHE <= ap_const_lv4_0;
    m_axi_featureh_ARID <= ap_const_lv1_0;
    m_axi_featureh_ARLEN <= ap_const_lv32_0;
    m_axi_featureh_ARLOCK <= ap_const_lv2_0;
    m_axi_featureh_ARPROT <= ap_const_lv3_0;
    m_axi_featureh_ARQOS <= ap_const_lv4_0;
    m_axi_featureh_ARREGION <= ap_const_lv4_0;
    m_axi_featureh_ARSIZE <= ap_const_lv3_0;
    m_axi_featureh_ARUSER <= ap_const_lv1_0;
    m_axi_featureh_ARVALID <= ap_const_logic_0;
    m_axi_featureh_AWADDR <= featureh_addr_reg_143;
    m_axi_featureh_AWBURST <= ap_const_lv2_0;
    m_axi_featureh_AWCACHE <= ap_const_lv4_0;
    m_axi_featureh_AWID <= ap_const_lv1_0;
    m_axi_featureh_AWLEN <= ap_const_lv32_200;
    m_axi_featureh_AWLOCK <= ap_const_lv2_0;
    m_axi_featureh_AWPROT <= ap_const_lv3_0;
    m_axi_featureh_AWQOS <= ap_const_lv4_0;
    m_axi_featureh_AWREGION <= ap_const_lv4_0;
    m_axi_featureh_AWSIZE <= ap_const_lv3_0;
    m_axi_featureh_AWUSER <= ap_const_lv1_0;

    -- m_axi_featureh_AWVALID assign process. --
    m_axi_featureh_AWVALID_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_reg_ioackin_m_axi_featureh_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_featureh_AWREADY))) then 
            m_axi_featureh_AWVALID <= ap_const_logic_1;
        else 
            m_axi_featureh_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_featureh_BREADY assign process. --
    m_axi_featureh_BREADY_assign_proc : process(m_axi_featureh_BVALID, ap_sig_cseq_ST_st10_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((m_axi_featureh_BVALID = ap_const_logic_0)))) then 
            m_axi_featureh_BREADY <= ap_const_logic_1;
        else 
            m_axi_featureh_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_featureh_RREADY <= ap_const_logic_0;
    m_axi_featureh_WDATA <= featureHist_load_reg_162;
    m_axi_featureh_WID <= ap_const_lv1_0;
    m_axi_featureh_WLAST <= ap_const_logic_0;
    m_axi_featureh_WSTRB <= ap_const_lv2_3;
    m_axi_featureh_WUSER <= ap_const_lv1_0;

    -- m_axi_featureh_WVALID assign process. --
    m_axi_featureh_WVALID_assign_proc : process(ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ioackin_m_axi_featureh_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_featureh_WREADY))) then 
            m_axi_featureh_WVALID <= ap_const_logic_1;
        else 
            m_axi_featureh_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_116_p1 <= std_logic_vector(resize(unsigned(tmp_fu_106_p4),64));
    tmp_4_i_fu_138_p1 <= std_logic_vector(resize(unsigned(indvar1_i_reg_95),64));
    tmp_fu_106_p4 <= featureh1_dout(31 downto 1);
end behav;
